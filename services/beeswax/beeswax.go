// Code generated by Thrift Compiler (0.18.1). DO NOT EDIT.

package beeswax

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
	"hive_metastore"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

var _ = hive_metastore.GoUnusedProtection__
type QueryState int64
const (
  QueryState_CREATED QueryState = 0
  QueryState_INITIALIZED QueryState = 1
  QueryState_COMPILED QueryState = 2
  QueryState_RUNNING QueryState = 3
  QueryState_FINISHED QueryState = 4
  QueryState_EXCEPTION QueryState = 5
)

func (p QueryState) String() string {
  switch p {
  case QueryState_CREATED: return "CREATED"
  case QueryState_INITIALIZED: return "INITIALIZED"
  case QueryState_COMPILED: return "COMPILED"
  case QueryState_RUNNING: return "RUNNING"
  case QueryState_FINISHED: return "FINISHED"
  case QueryState_EXCEPTION: return "EXCEPTION"
  }
  return "<UNSET>"
}

func QueryStateFromString(s string) (QueryState, error) {
  switch s {
  case "CREATED": return QueryState_CREATED, nil 
  case "INITIALIZED": return QueryState_INITIALIZED, nil 
  case "COMPILED": return QueryState_COMPILED, nil 
  case "RUNNING": return QueryState_RUNNING, nil 
  case "FINISHED": return QueryState_FINISHED, nil 
  case "EXCEPTION": return QueryState_EXCEPTION, nil 
  }
  return QueryState(0), fmt.Errorf("not a valid QueryState string")
}


func QueryStatePtr(v QueryState) *QueryState { return &v }

func (p QueryState) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *QueryState) UnmarshalText(text []byte) error {
q, err := QueryStateFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *QueryState) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = QueryState(v)
return nil
}

func (p * QueryState) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type LogContextId string

func LogContextIdPtr(v LogContextId) *LogContextId { return &v }

// Attributes:
//  - Query
//  - Configuration
//  - HadoopUser
type Query struct {
  Query string `thrift:"query,1" db:"query" json:"query"`
  // unused field # 2
  Configuration []string `thrift:"configuration,3" db:"configuration" json:"configuration"`
  HadoopUser string `thrift:"hadoop_user,4" db:"hadoop_user" json:"hadoop_user"`
}

func NewQuery() *Query {
  return &Query{}
}


func (p *Query) GetQuery() string {
  return p.Query
}

func (p *Query) GetConfiguration() []string {
  return p.Configuration
}

func (p *Query) GetHadoopUser() string {
  return p.HadoopUser
}
func (p *Query) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Query)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Query = v
}
  return nil
}

func (p *Query)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Configuration =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Configuration = append(p.Configuration, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Query)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.HadoopUser = v
}
  return nil
}

func (p *Query) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Query"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Query) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "query", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Query)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.query (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query: ", p), err) }
  return err
}

func (p *Query) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "configuration", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:configuration: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Configuration)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Configuration {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:configuration: ", p), err) }
  return err
}

func (p *Query) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hadoop_user", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:hadoop_user: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.HadoopUser)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hadoop_user (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:hadoop_user: ", p), err) }
  return err
}

func (p *Query) Equals(other *Query) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Query != other.Query { return false }
  if len(p.Configuration) != len(other.Configuration) { return false }
  for i, _tgt := range p.Configuration {
    _src1 := other.Configuration[i]
    if _tgt != _src1 { return false }
  }
  if p.HadoopUser != other.HadoopUser { return false }
  return true
}

func (p *Query) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Query(%+v)", *p)
}

func (p *Query) Validate() error {
  return nil
}
// Attributes:
//  - ID
//  - LogContext
type QueryHandle struct {
  ID string `thrift:"id,1" db:"id" json:"id"`
  LogContext LogContextId `thrift:"log_context,2" db:"log_context" json:"log_context"`
}

func NewQueryHandle() *QueryHandle {
  return &QueryHandle{}
}


func (p *QueryHandle) GetID() string {
  return p.ID
}

func (p *QueryHandle) GetLogContext() LogContextId {
  return p.LogContext
}
func (p *QueryHandle) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *QueryHandle)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *QueryHandle)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := LogContextId(v)
  p.LogContext = temp
}
  return nil
}

func (p *QueryHandle) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "QueryHandle"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueryHandle) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err) }
  return err
}

func (p *QueryHandle) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "log_context", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:log_context: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LogContext)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.log_context (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:log_context: ", p), err) }
  return err
}

func (p *QueryHandle) Equals(other *QueryHandle) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ID != other.ID { return false }
  if p.LogContext != other.LogContext { return false }
  return true
}

func (p *QueryHandle) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueryHandle(%+v)", *p)
}

func (p *QueryHandle) Validate() error {
  return nil
}
// Attributes:
//  - Textual
type QueryExplanation struct {
  Textual string `thrift:"textual,1" db:"textual" json:"textual"`
}

func NewQueryExplanation() *QueryExplanation {
  return &QueryExplanation{}
}


func (p *QueryExplanation) GetTextual() string {
  return p.Textual
}
func (p *QueryExplanation) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *QueryExplanation)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Textual = v
}
  return nil
}

func (p *QueryExplanation) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "QueryExplanation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueryExplanation) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "textual", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:textual: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Textual)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.textual (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:textual: ", p), err) }
  return err
}

func (p *QueryExplanation) Equals(other *QueryExplanation) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Textual != other.Textual { return false }
  return true
}

func (p *QueryExplanation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueryExplanation(%+v)", *p)
}

func (p *QueryExplanation) Validate() error {
  return nil
}
// Attributes:
//  - Ready
//  - Columns
//  - Data
//  - StartRow
//  - HasMore
type Results struct {
  Ready bool `thrift:"ready,1" db:"ready" json:"ready"`
  Columns []string `thrift:"columns,2" db:"columns" json:"columns"`
  Data []string `thrift:"data,3" db:"data" json:"data"`
  StartRow int64 `thrift:"start_row,4" db:"start_row" json:"start_row"`
  HasMore bool `thrift:"has_more,5" db:"has_more" json:"has_more"`
}

func NewResults() *Results {
  return &Results{}
}


func (p *Results) GetReady() bool {
  return p.Ready
}

func (p *Results) GetColumns() []string {
  return p.Columns
}

func (p *Results) GetData() []string {
  return p.Data
}

func (p *Results) GetStartRow() int64 {
  return p.StartRow
}

func (p *Results) GetHasMore() bool {
  return p.HasMore
}
func (p *Results) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Results)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Ready = v
}
  return nil
}

func (p *Results)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Columns =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.Columns = append(p.Columns, _elem2)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Results)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Data =  tSlice
  for i := 0; i < size; i ++ {
var _elem3 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem3 = v
}
    p.Data = append(p.Data, _elem3)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *Results)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.StartRow = v
}
  return nil
}

func (p *Results)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.HasMore = v
}
  return nil
}

func (p *Results) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "Results"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Results) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ready", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ready: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Ready)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ready (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ready: ", p), err) }
  return err
}

func (p *Results) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "columns", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:columns: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Columns)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Columns {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:columns: ", p), err) }
  return err
}

func (p *Results) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "data", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:data: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.Data)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Data {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:data: ", p), err) }
  return err
}

func (p *Results) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "start_row", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:start_row: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartRow)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_row (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:start_row: ", p), err) }
  return err
}

func (p *Results) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "has_more", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:has_more: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.HasMore)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.has_more (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:has_more: ", p), err) }
  return err
}

func (p *Results) Equals(other *Results) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Ready != other.Ready { return false }
  if len(p.Columns) != len(other.Columns) { return false }
  for i, _tgt := range p.Columns {
    _src4 := other.Columns[i]
    if _tgt != _src4 { return false }
  }
  if len(p.Data) != len(other.Data) { return false }
  for i, _tgt := range p.Data {
    _src5 := other.Data[i]
    if _tgt != _src5 { return false }
  }
  if p.StartRow != other.StartRow { return false }
  if p.HasMore != other.HasMore { return false }
  return true
}

func (p *Results) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Results(%+v)", *p)
}

func (p *Results) Validate() error {
  return nil
}
// Metadata information about the results.
// Applicable only for SELECT.
// 
// Attributes:
//  - Schema: The schema of the results
//  - TableDir: The directory containing the results. Not applicable for partition table.
//  - InTablename: If the results are straight from an existing table, the table name.
//  - Delim: Field delimiter
type ResultsMetadata struct {
  Schema *hive_metastore.Schema `thrift:"schema,1" db:"schema" json:"schema"`
  TableDir string `thrift:"table_dir,2" db:"table_dir" json:"table_dir"`
  InTablename string `thrift:"in_tablename,3" db:"in_tablename" json:"in_tablename"`
  Delim string `thrift:"delim,4" db:"delim" json:"delim"`
}

func NewResultsMetadata() *ResultsMetadata {
  return &ResultsMetadata{}
}

var ResultsMetadata_Schema_DEFAULT *hive_metastore.Schema
func (p *ResultsMetadata) GetSchema() *hive_metastore.Schema {
  if !p.IsSetSchema() {
    return ResultsMetadata_Schema_DEFAULT
  }
return p.Schema
}

func (p *ResultsMetadata) GetTableDir() string {
  return p.TableDir
}

func (p *ResultsMetadata) GetInTablename() string {
  return p.InTablename
}

func (p *ResultsMetadata) GetDelim() string {
  return p.Delim
}
func (p *ResultsMetadata) IsSetSchema() bool {
  return p.Schema != nil
}

func (p *ResultsMetadata) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ResultsMetadata)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Schema = &hive_metastore.Schema{}
  if err := p.Schema.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Schema), err)
  }
  return nil
}

func (p *ResultsMetadata)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TableDir = v
}
  return nil
}

func (p *ResultsMetadata)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.InTablename = v
}
  return nil
}

func (p *ResultsMetadata)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Delim = v
}
  return nil
}

func (p *ResultsMetadata) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ResultsMetadata"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ResultsMetadata) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "schema", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:schema: ", p), err) }
  if err := p.Schema.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Schema), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:schema: ", p), err) }
  return err
}

func (p *ResultsMetadata) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "table_dir", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table_dir: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TableDir)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table_dir (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table_dir: ", p), err) }
  return err
}

func (p *ResultsMetadata) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "in_tablename", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:in_tablename: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.InTablename)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.in_tablename (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:in_tablename: ", p), err) }
  return err
}

func (p *ResultsMetadata) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "delim", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:delim: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Delim)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.delim (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:delim: ", p), err) }
  return err
}

func (p *ResultsMetadata) Equals(other *ResultsMetadata) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Schema.Equals(other.Schema) { return false }
  if p.TableDir != other.TableDir { return false }
  if p.InTablename != other.InTablename { return false }
  if p.Delim != other.Delim { return false }
  return true
}

func (p *ResultsMetadata) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ResultsMetadata(%+v)", *p)
}

func (p *ResultsMetadata) Validate() error {
  return nil
}
// Attributes:
//  - Message
//  - LogContext
//  - Handle
//  - ErrorCode
//  - SQLState
type BeeswaxException struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
  LogContext LogContextId `thrift:"log_context,2" db:"log_context" json:"log_context"`
  Handle *QueryHandle `thrift:"handle,3" db:"handle" json:"handle"`
  ErrorCode int32 `thrift:"errorCode,4" db:"errorCode" json:"errorCode"`
  SQLState string `thrift:"SQLState,5" db:"SQLState" json:"SQLState"`
}

func NewBeeswaxException() *BeeswaxException {
  return &BeeswaxException{
SQLState: "     ",
}
}


func (p *BeeswaxException) GetMessage() string {
  return p.Message
}

func (p *BeeswaxException) GetLogContext() LogContextId {
  return p.LogContext
}
var BeeswaxException_Handle_DEFAULT *QueryHandle
func (p *BeeswaxException) GetHandle() *QueryHandle {
  if !p.IsSetHandle() {
    return BeeswaxException_Handle_DEFAULT
  }
return p.Handle
}
var BeeswaxException_ErrorCode_DEFAULT int32 = 0

func (p *BeeswaxException) GetErrorCode() int32 {
  return p.ErrorCode
}
var BeeswaxException_SQLState_DEFAULT string = "     "

func (p *BeeswaxException) GetSQLState() string {
  return p.SQLState
}
func (p *BeeswaxException) IsSetHandle() bool {
  return p.Handle != nil
}

func (p *BeeswaxException) IsSetErrorCode() bool {
  return p.ErrorCode != BeeswaxException_ErrorCode_DEFAULT
}

func (p *BeeswaxException) IsSetSQLState() bool {
  return p.SQLState != BeeswaxException_SQLState_DEFAULT
}

func (p *BeeswaxException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BeeswaxException)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *BeeswaxException)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := LogContextId(v)
  p.LogContext = temp
}
  return nil
}

func (p *BeeswaxException)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  p.Handle = &QueryHandle{}
  if err := p.Handle.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Handle), err)
  }
  return nil
}

func (p *BeeswaxException)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ErrorCode = v
}
  return nil
}

func (p *BeeswaxException)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.SQLState = v
}
  return nil
}

func (p *BeeswaxException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "BeeswaxException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BeeswaxException) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *BeeswaxException) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "log_context", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:log_context: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LogContext)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.log_context (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:log_context: ", p), err) }
  return err
}

func (p *BeeswaxException) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "handle", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:handle: ", p), err) }
  if err := p.Handle.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Handle), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:handle: ", p), err) }
  return err
}

func (p *BeeswaxException) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetErrorCode() {
    if err := oprot.WriteFieldBegin(ctx, "errorCode", thrift.I32, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:errorCode: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(p.ErrorCode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.errorCode (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:errorCode: ", p), err) }
  }
  return err
}

func (p *BeeswaxException) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSQLState() {
    if err := oprot.WriteFieldBegin(ctx, "SQLState", thrift.STRING, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:SQLState: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.SQLState)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.SQLState (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:SQLState: ", p), err) }
  }
  return err
}

func (p *BeeswaxException) Equals(other *BeeswaxException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  if p.LogContext != other.LogContext { return false }
  if !p.Handle.Equals(other.Handle) { return false }
  if p.ErrorCode != other.ErrorCode { return false }
  if p.SQLState != other.SQLState { return false }
  return true
}

func (p *BeeswaxException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeeswaxException(%+v)", *p)
}

func (p *BeeswaxException) Error() string {
  return p.String()
}

func (BeeswaxException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*BeeswaxException)(nil)

func (p *BeeswaxException) Validate() error {
  return nil
}
type QueryNotFoundException struct {
}

func NewQueryNotFoundException() *QueryNotFoundException {
  return &QueryNotFoundException{}
}

func (p *QueryNotFoundException) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *QueryNotFoundException) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "QueryNotFoundException"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *QueryNotFoundException) Equals(other *QueryNotFoundException) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *QueryNotFoundException) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("QueryNotFoundException(%+v)", *p)
}

func (p *QueryNotFoundException) Error() string {
  return p.String()
}

func (QueryNotFoundException) TExceptionType() thrift.TExceptionType {
  return thrift.TExceptionTypeCompiled
}

var _ thrift.TException = (*QueryNotFoundException)(nil)

func (p *QueryNotFoundException) Validate() error {
  return nil
}
// Represents a Hadoop-style configuration variable.
// 
// Attributes:
//  - Key
//  - Value
//  - Description
type ConfigVariable struct {
  Key string `thrift:"key,1" db:"key" json:"key"`
  Value string `thrift:"value,2" db:"value" json:"value"`
  Description string `thrift:"description,3" db:"description" json:"description"`
}

func NewConfigVariable() *ConfigVariable {
  return &ConfigVariable{}
}


func (p *ConfigVariable) GetKey() string {
  return p.Key
}

func (p *ConfigVariable) GetValue() string {
  return p.Value
}

func (p *ConfigVariable) GetDescription() string {
  return p.Description
}
func (p *ConfigVariable) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfigVariable)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *ConfigVariable)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *ConfigVariable)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Description = v
}
  return nil
}

func (p *ConfigVariable) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ConfigVariable"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfigVariable) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *ConfigVariable) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Value)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *ConfigVariable) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "description", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:description: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Description)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.description (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:description: ", p), err) }
  return err
}

func (p *ConfigVariable) Equals(other *ConfigVariable) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Key != other.Key { return false }
  if p.Value != other.Value { return false }
  if p.Description != other.Description { return false }
  return true
}

func (p *ConfigVariable) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfigVariable(%+v)", *p)
}

func (p *ConfigVariable) Validate() error {
  return nil
}
type BeeswaxService interface {
  // Submit a query and return a handle (QueryHandle). The query runs asynchronously.
  // 
  // Parameters:
  //  - Query
  Query(ctx context.Context, query *Query) (_r *QueryHandle, _err error)
  // run a query synchronously and return a handle (QueryHandle).
  // 
  // Parameters:
  //  - Query
  //  - ClientCtx
  ExecuteAndWait(ctx context.Context, query *Query, clientCtx LogContextId) (_r *QueryHandle, _err error)
  // Get the query plan for a query.
  // 
  // Parameters:
  //  - Query
  Explain(ctx context.Context, query *Query) (_r *QueryExplanation, _err error)
  // Get the results of a query. This is non-blocking. Caller should check
  // Results.ready to determine if the results are in yet. The call requests
  // the batch size of fetch.
  // 
  // Parameters:
  //  - QueryID
  //  - StartOver
  //  - FetchSize
  Fetch(ctx context.Context, query_id *QueryHandle, start_over bool, fetch_size int32) (_r *Results, _err error)
  // Get the state of the query
  // 
  // Parameters:
  //  - Handle
  GetState(ctx context.Context, handle *QueryHandle) (_r QueryState, _err error)
  // Get the result metadata
  // 
  // Parameters:
  //  - Handle
  GetResultsMetadata(ctx context.Context, handle *QueryHandle) (_r *ResultsMetadata, _err error)
  // Used to test connection to server.  A "noop" command.
  // 
  // Parameters:
  //  - S
  Echo(ctx context.Context, s string) (_r string, _err error)
  // Returns a string representation of the configuration object being used.
  // Handy for debugging.
  DumpConfig(ctx context.Context) (_r string, _err error)
  // Get the log messages related to the given context.
  // 
  // Parameters:
  //  - Context
  GetLog(ctx context.Context, context LogContextId) (_r string, _err error)
  // Parameters:
  //  - IncludeHadoop
  GetDefaultConfiguration(ctx context.Context, include_hadoop bool) (_r []*ConfigVariable, _err error)
  // Parameters:
  //  - Handle
  Close(ctx context.Context, handle *QueryHandle) (_err error)
  // Parameters:
  //  - LogContext
  Clean(ctx context.Context, log_context LogContextId) (_err error)
}

type BeeswaxServiceClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewBeeswaxServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BeeswaxServiceClient {
  return &BeeswaxServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewBeeswaxServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BeeswaxServiceClient {
  return &BeeswaxServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewBeeswaxServiceClient(c thrift.TClient) *BeeswaxServiceClient {
  return &BeeswaxServiceClient{
    c: c,
  }
}

func (p *BeeswaxServiceClient) Client_() thrift.TClient {
  return p.c
}

func (p *BeeswaxServiceClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *BeeswaxServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// Submit a query and return a handle (QueryHandle). The query runs asynchronously.
// 
// Parameters:
//  - Query
func (p *BeeswaxServiceClient) Query(ctx context.Context, query *Query) (_r *QueryHandle, _err error) {
  var _args6 BeeswaxServiceQueryArgs
  _args6.Query = query
  var _result8 BeeswaxServiceQueryResult
  var _meta7 thrift.ResponseMeta
  _meta7, _err = p.Client_().Call(ctx, "query", &_args6, &_result8)
  p.SetLastResponseMeta_(_meta7)
  if _err != nil {
    return
  }
  switch {
  case _result8.Error!= nil:
    return _r, _result8.Error
  }

  if _ret9 := _result8.GetSuccess(); _ret9 != nil {
    return _ret9, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "query failed: unknown result")
}

// run a query synchronously and return a handle (QueryHandle).
// 
// Parameters:
//  - Query
//  - ClientCtx
func (p *BeeswaxServiceClient) ExecuteAndWait(ctx context.Context, query *Query, clientCtx LogContextId) (_r *QueryHandle, _err error) {
  var _args10 BeeswaxServiceExecuteAndWaitArgs
  _args10.Query = query
  _args10.ClientCtx = clientCtx
  var _result12 BeeswaxServiceExecuteAndWaitResult
  var _meta11 thrift.ResponseMeta
  _meta11, _err = p.Client_().Call(ctx, "executeAndWait", &_args10, &_result12)
  p.SetLastResponseMeta_(_meta11)
  if _err != nil {
    return
  }
  switch {
  case _result12.Error!= nil:
    return _r, _result12.Error
  }

  if _ret13 := _result12.GetSuccess(); _ret13 != nil {
    return _ret13, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "executeAndWait failed: unknown result")
}

// Get the query plan for a query.
// 
// Parameters:
//  - Query
func (p *BeeswaxServiceClient) Explain(ctx context.Context, query *Query) (_r *QueryExplanation, _err error) {
  var _args14 BeeswaxServiceExplainArgs
  _args14.Query = query
  var _result16 BeeswaxServiceExplainResult
  var _meta15 thrift.ResponseMeta
  _meta15, _err = p.Client_().Call(ctx, "explain", &_args14, &_result16)
  p.SetLastResponseMeta_(_meta15)
  if _err != nil {
    return
  }
  switch {
  case _result16.Error!= nil:
    return _r, _result16.Error
  }

  if _ret17 := _result16.GetSuccess(); _ret17 != nil {
    return _ret17, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "explain failed: unknown result")
}

// Get the results of a query. This is non-blocking. Caller should check
// Results.ready to determine if the results are in yet. The call requests
// the batch size of fetch.
// 
// Parameters:
//  - QueryID
//  - StartOver
//  - FetchSize
func (p *BeeswaxServiceClient) Fetch(ctx context.Context, query_id *QueryHandle, start_over bool, fetch_size int32) (_r *Results, _err error) {
  var _args18 BeeswaxServiceFetchArgs
  _args18.QueryID = query_id
  _args18.StartOver = start_over
  _args18.FetchSize = fetch_size
  var _result20 BeeswaxServiceFetchResult
  var _meta19 thrift.ResponseMeta
  _meta19, _err = p.Client_().Call(ctx, "fetch", &_args18, &_result20)
  p.SetLastResponseMeta_(_meta19)
  if _err != nil {
    return
  }
  switch {
  case _result20.Error!= nil:
    return _r, _result20.Error
  case _result20.Error2!= nil:
    return _r, _result20.Error2
  }

  if _ret21 := _result20.GetSuccess(); _ret21 != nil {
    return _ret21, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "fetch failed: unknown result")
}

// Get the state of the query
// 
// Parameters:
//  - Handle
func (p *BeeswaxServiceClient) GetState(ctx context.Context, handle *QueryHandle) (_r QueryState, _err error) {
  var _args22 BeeswaxServiceGetStateArgs
  _args22.Handle = handle
  var _result24 BeeswaxServiceGetStateResult
  var _meta23 thrift.ResponseMeta
  _meta23, _err = p.Client_().Call(ctx, "get_state", &_args22, &_result24)
  p.SetLastResponseMeta_(_meta23)
  if _err != nil {
    return
  }
  switch {
  case _result24.Error!= nil:
    return _r, _result24.Error
  }

  return _result24.GetSuccess(), nil
}

// Get the result metadata
// 
// Parameters:
//  - Handle
func (p *BeeswaxServiceClient) GetResultsMetadata(ctx context.Context, handle *QueryHandle) (_r *ResultsMetadata, _err error) {
  var _args25 BeeswaxServiceGetResultsMetadataArgs
  _args25.Handle = handle
  var _result27 BeeswaxServiceGetResultsMetadataResult
  var _meta26 thrift.ResponseMeta
  _meta26, _err = p.Client_().Call(ctx, "get_results_metadata", &_args25, &_result27)
  p.SetLastResponseMeta_(_meta26)
  if _err != nil {
    return
  }
  switch {
  case _result27.Error!= nil:
    return _r, _result27.Error
  }

  if _ret28 := _result27.GetSuccess(); _ret28 != nil {
    return _ret28, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "get_results_metadata failed: unknown result")
}

// Used to test connection to server.  A "noop" command.
// 
// Parameters:
//  - S
func (p *BeeswaxServiceClient) Echo(ctx context.Context, s string) (_r string, _err error) {
  var _args29 BeeswaxServiceEchoArgs
  _args29.S = s
  var _result31 BeeswaxServiceEchoResult
  var _meta30 thrift.ResponseMeta
  _meta30, _err = p.Client_().Call(ctx, "echo", &_args29, &_result31)
  p.SetLastResponseMeta_(_meta30)
  if _err != nil {
    return
  }
  return _result31.GetSuccess(), nil
}

// Returns a string representation of the configuration object being used.
// Handy for debugging.
func (p *BeeswaxServiceClient) DumpConfig(ctx context.Context) (_r string, _err error) {
  var _args32 BeeswaxServiceDumpConfigArgs
  var _result34 BeeswaxServiceDumpConfigResult
  var _meta33 thrift.ResponseMeta
  _meta33, _err = p.Client_().Call(ctx, "dump_config", &_args32, &_result34)
  p.SetLastResponseMeta_(_meta33)
  if _err != nil {
    return
  }
  return _result34.GetSuccess(), nil
}

// Get the log messages related to the given context.
// 
// Parameters:
//  - Context
func (p *BeeswaxServiceClient) GetLog(ctx context.Context, context LogContextId) (_r string, _err error) {
  var _args35 BeeswaxServiceGetLogArgs
  _args35.Context = context
  var _result37 BeeswaxServiceGetLogResult
  var _meta36 thrift.ResponseMeta
  _meta36, _err = p.Client_().Call(ctx, "get_log", &_args35, &_result37)
  p.SetLastResponseMeta_(_meta36)
  if _err != nil {
    return
  }
  switch {
  case _result37.Error!= nil:
    return _r, _result37.Error
  }

  return _result37.GetSuccess(), nil
}

// Parameters:
//  - IncludeHadoop
func (p *BeeswaxServiceClient) GetDefaultConfiguration(ctx context.Context, include_hadoop bool) (_r []*ConfigVariable, _err error) {
  var _args38 BeeswaxServiceGetDefaultConfigurationArgs
  _args38.IncludeHadoop = include_hadoop
  var _result40 BeeswaxServiceGetDefaultConfigurationResult
  var _meta39 thrift.ResponseMeta
  _meta39, _err = p.Client_().Call(ctx, "get_default_configuration", &_args38, &_result40)
  p.SetLastResponseMeta_(_meta39)
  if _err != nil {
    return
  }
  return _result40.GetSuccess(), nil
}

// Parameters:
//  - Handle
func (p *BeeswaxServiceClient) Close(ctx context.Context, handle *QueryHandle) (_err error) {
  var _args41 BeeswaxServiceCloseArgs
  _args41.Handle = handle
  var _result43 BeeswaxServiceCloseResult
  var _meta42 thrift.ResponseMeta
  _meta42, _err = p.Client_().Call(ctx, "close", &_args41, &_result43)
  p.SetLastResponseMeta_(_meta42)
  if _err != nil {
    return
  }
  switch {
  case _result43.Error!= nil:
    return _result43.Error
  case _result43.Error2!= nil:
    return _result43.Error2
  }

  return nil
}

// Parameters:
//  - LogContext
func (p *BeeswaxServiceClient) Clean(ctx context.Context, log_context LogContextId) (_err error) {
  var _args44 BeeswaxServiceCleanArgs
  _args44.LogContext = log_context
  var _result46 BeeswaxServiceCleanResult
  var _meta45 thrift.ResponseMeta
  _meta45, _err = p.Client_().Call(ctx, "clean", &_args44, &_result46)
  p.SetLastResponseMeta_(_meta45)
  if _err != nil {
    return
  }
  return nil
}

type BeeswaxServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler BeeswaxService
}

func (p *BeeswaxServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *BeeswaxServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *BeeswaxServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewBeeswaxServiceProcessor(handler BeeswaxService) *BeeswaxServiceProcessor {

  self47 := &BeeswaxServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self47.processorMap["query"] = &beeswaxServiceProcessorQuery{handler:handler}
  self47.processorMap["executeAndWait"] = &beeswaxServiceProcessorExecuteAndWait{handler:handler}
  self47.processorMap["explain"] = &beeswaxServiceProcessorExplain{handler:handler}
  self47.processorMap["fetch"] = &beeswaxServiceProcessorFetch{handler:handler}
  self47.processorMap["get_state"] = &beeswaxServiceProcessorGetState{handler:handler}
  self47.processorMap["get_results_metadata"] = &beeswaxServiceProcessorGetResultsMetadata{handler:handler}
  self47.processorMap["echo"] = &beeswaxServiceProcessorEcho{handler:handler}
  self47.processorMap["dump_config"] = &beeswaxServiceProcessorDumpConfig{handler:handler}
  self47.processorMap["get_log"] = &beeswaxServiceProcessorGetLog{handler:handler}
  self47.processorMap["get_default_configuration"] = &beeswaxServiceProcessorGetDefaultConfiguration{handler:handler}
  self47.processorMap["close"] = &beeswaxServiceProcessorClose{handler:handler}
  self47.processorMap["clean"] = &beeswaxServiceProcessorClean{handler:handler}
return self47
}

func (p *BeeswaxServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x48 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x48.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x48

}

type beeswaxServiceProcessorQuery struct {
  handler BeeswaxService
}

func (p *beeswaxServiceProcessorQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err49 error
  args := BeeswaxServiceQueryArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "query", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BeeswaxServiceQueryResult{}
  if retval, err2 := p.handler.Query(ctx, args.Query); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *BeeswaxException:
      result.Error = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc50 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing query: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "query", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err49 = thrift.WrapTException(err2)
      }
      if err2 := _exc50.Write(ctx, oprot); _write_err49 == nil && err2 != nil {
        _write_err49 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err49 == nil && err2 != nil {
        _write_err49 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err49 == nil && err2 != nil {
        _write_err49 = thrift.WrapTException(err2)
      }
      if _write_err49 != nil {
        return false, thrift.WrapTException(_write_err49)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "query", thrift.REPLY, seqId); err2 != nil {
    _write_err49 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err49 == nil && err2 != nil {
    _write_err49 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err49 == nil && err2 != nil {
    _write_err49 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err49 == nil && err2 != nil {
    _write_err49 = thrift.WrapTException(err2)
  }
  if _write_err49 != nil {
    return false, thrift.WrapTException(_write_err49)
  }
  return true, err
}

type beeswaxServiceProcessorExecuteAndWait struct {
  handler BeeswaxService
}

func (p *beeswaxServiceProcessorExecuteAndWait) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err51 error
  args := BeeswaxServiceExecuteAndWaitArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "executeAndWait", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BeeswaxServiceExecuteAndWaitResult{}
  if retval, err2 := p.handler.ExecuteAndWait(ctx, args.Query, args.ClientCtx); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *BeeswaxException:
      result.Error = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc52 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing executeAndWait: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "executeAndWait", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err51 = thrift.WrapTException(err2)
      }
      if err2 := _exc52.Write(ctx, oprot); _write_err51 == nil && err2 != nil {
        _write_err51 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err51 == nil && err2 != nil {
        _write_err51 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err51 == nil && err2 != nil {
        _write_err51 = thrift.WrapTException(err2)
      }
      if _write_err51 != nil {
        return false, thrift.WrapTException(_write_err51)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "executeAndWait", thrift.REPLY, seqId); err2 != nil {
    _write_err51 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err51 == nil && err2 != nil {
    _write_err51 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err51 == nil && err2 != nil {
    _write_err51 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err51 == nil && err2 != nil {
    _write_err51 = thrift.WrapTException(err2)
  }
  if _write_err51 != nil {
    return false, thrift.WrapTException(_write_err51)
  }
  return true, err
}

type beeswaxServiceProcessorExplain struct {
  handler BeeswaxService
}

func (p *beeswaxServiceProcessorExplain) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err53 error
  args := BeeswaxServiceExplainArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "explain", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BeeswaxServiceExplainResult{}
  if retval, err2 := p.handler.Explain(ctx, args.Query); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *BeeswaxException:
      result.Error = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc54 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing explain: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "explain", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err53 = thrift.WrapTException(err2)
      }
      if err2 := _exc54.Write(ctx, oprot); _write_err53 == nil && err2 != nil {
        _write_err53 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err53 == nil && err2 != nil {
        _write_err53 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err53 == nil && err2 != nil {
        _write_err53 = thrift.WrapTException(err2)
      }
      if _write_err53 != nil {
        return false, thrift.WrapTException(_write_err53)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "explain", thrift.REPLY, seqId); err2 != nil {
    _write_err53 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err53 == nil && err2 != nil {
    _write_err53 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err53 == nil && err2 != nil {
    _write_err53 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err53 == nil && err2 != nil {
    _write_err53 = thrift.WrapTException(err2)
  }
  if _write_err53 != nil {
    return false, thrift.WrapTException(_write_err53)
  }
  return true, err
}

type beeswaxServiceProcessorFetch struct {
  handler BeeswaxService
}

func (p *beeswaxServiceProcessorFetch) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err55 error
  args := BeeswaxServiceFetchArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "fetch", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BeeswaxServiceFetchResult{}
  if retval, err2 := p.handler.Fetch(ctx, args.QueryID, args.StartOver, args.FetchSize); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *QueryNotFoundException:
      result.Error = v
    case *BeeswaxException:
      result.Error2 = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc56 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetch: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "fetch", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err55 = thrift.WrapTException(err2)
      }
      if err2 := _exc56.Write(ctx, oprot); _write_err55 == nil && err2 != nil {
        _write_err55 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err55 == nil && err2 != nil {
        _write_err55 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err55 == nil && err2 != nil {
        _write_err55 = thrift.WrapTException(err2)
      }
      if _write_err55 != nil {
        return false, thrift.WrapTException(_write_err55)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "fetch", thrift.REPLY, seqId); err2 != nil {
    _write_err55 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err55 == nil && err2 != nil {
    _write_err55 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err55 == nil && err2 != nil {
    _write_err55 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err55 == nil && err2 != nil {
    _write_err55 = thrift.WrapTException(err2)
  }
  if _write_err55 != nil {
    return false, thrift.WrapTException(_write_err55)
  }
  return true, err
}

type beeswaxServiceProcessorGetState struct {
  handler BeeswaxService
}

func (p *beeswaxServiceProcessorGetState) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err57 error
  args := BeeswaxServiceGetStateArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_state", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BeeswaxServiceGetStateResult{}
  if retval, err2 := p.handler.GetState(ctx, args.Handle); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *QueryNotFoundException:
      result.Error = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc58 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_state: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "get_state", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err57 = thrift.WrapTException(err2)
      }
      if err2 := _exc58.Write(ctx, oprot); _write_err57 == nil && err2 != nil {
        _write_err57 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err57 == nil && err2 != nil {
        _write_err57 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err57 == nil && err2 != nil {
        _write_err57 = thrift.WrapTException(err2)
      }
      if _write_err57 != nil {
        return false, thrift.WrapTException(_write_err57)
      }
      return true, err
    }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "get_state", thrift.REPLY, seqId); err2 != nil {
    _write_err57 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err57 == nil && err2 != nil {
    _write_err57 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err57 == nil && err2 != nil {
    _write_err57 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err57 == nil && err2 != nil {
    _write_err57 = thrift.WrapTException(err2)
  }
  if _write_err57 != nil {
    return false, thrift.WrapTException(_write_err57)
  }
  return true, err
}

type beeswaxServiceProcessorGetResultsMetadata struct {
  handler BeeswaxService
}

func (p *beeswaxServiceProcessorGetResultsMetadata) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err59 error
  args := BeeswaxServiceGetResultsMetadataArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_results_metadata", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BeeswaxServiceGetResultsMetadataResult{}
  if retval, err2 := p.handler.GetResultsMetadata(ctx, args.Handle); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *QueryNotFoundException:
      result.Error = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc60 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_results_metadata: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "get_results_metadata", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err59 = thrift.WrapTException(err2)
      }
      if err2 := _exc60.Write(ctx, oprot); _write_err59 == nil && err2 != nil {
        _write_err59 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err59 == nil && err2 != nil {
        _write_err59 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err59 == nil && err2 != nil {
        _write_err59 = thrift.WrapTException(err2)
      }
      if _write_err59 != nil {
        return false, thrift.WrapTException(_write_err59)
      }
      return true, err
    }
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "get_results_metadata", thrift.REPLY, seqId); err2 != nil {
    _write_err59 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err59 == nil && err2 != nil {
    _write_err59 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err59 == nil && err2 != nil {
    _write_err59 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err59 == nil && err2 != nil {
    _write_err59 = thrift.WrapTException(err2)
  }
  if _write_err59 != nil {
    return false, thrift.WrapTException(_write_err59)
  }
  return true, err
}

type beeswaxServiceProcessorEcho struct {
  handler BeeswaxService
}

func (p *beeswaxServiceProcessorEcho) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err61 error
  args := BeeswaxServiceEchoArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "echo", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BeeswaxServiceEchoResult{}
  if retval, err2 := p.handler.Echo(ctx, args.S); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc62 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing echo: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "echo", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err61 = thrift.WrapTException(err2)
    }
    if err2 := _exc62.Write(ctx, oprot); _write_err61 == nil && err2 != nil {
      _write_err61 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err61 == nil && err2 != nil {
      _write_err61 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err61 == nil && err2 != nil {
      _write_err61 = thrift.WrapTException(err2)
    }
    if _write_err61 != nil {
      return false, thrift.WrapTException(_write_err61)
    }
    return true, err
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "echo", thrift.REPLY, seqId); err2 != nil {
    _write_err61 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err61 == nil && err2 != nil {
    _write_err61 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err61 == nil && err2 != nil {
    _write_err61 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err61 == nil && err2 != nil {
    _write_err61 = thrift.WrapTException(err2)
  }
  if _write_err61 != nil {
    return false, thrift.WrapTException(_write_err61)
  }
  return true, err
}

type beeswaxServiceProcessorDumpConfig struct {
  handler BeeswaxService
}

func (p *beeswaxServiceProcessorDumpConfig) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err63 error
  args := BeeswaxServiceDumpConfigArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "dump_config", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BeeswaxServiceDumpConfigResult{}
  if retval, err2 := p.handler.DumpConfig(ctx); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc64 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dump_config: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "dump_config", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err63 = thrift.WrapTException(err2)
    }
    if err2 := _exc64.Write(ctx, oprot); _write_err63 == nil && err2 != nil {
      _write_err63 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err63 == nil && err2 != nil {
      _write_err63 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err63 == nil && err2 != nil {
      _write_err63 = thrift.WrapTException(err2)
    }
    if _write_err63 != nil {
      return false, thrift.WrapTException(_write_err63)
    }
    return true, err
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "dump_config", thrift.REPLY, seqId); err2 != nil {
    _write_err63 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err63 == nil && err2 != nil {
    _write_err63 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err63 == nil && err2 != nil {
    _write_err63 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err63 == nil && err2 != nil {
    _write_err63 = thrift.WrapTException(err2)
  }
  if _write_err63 != nil {
    return false, thrift.WrapTException(_write_err63)
  }
  return true, err
}

type beeswaxServiceProcessorGetLog struct {
  handler BeeswaxService
}

func (p *beeswaxServiceProcessorGetLog) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err65 error
  args := BeeswaxServiceGetLogArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_log", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BeeswaxServiceGetLogResult{}
  if retval, err2 := p.handler.GetLog(ctx, args.Context); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *QueryNotFoundException:
      result.Error = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc66 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_log: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "get_log", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err65 = thrift.WrapTException(err2)
      }
      if err2 := _exc66.Write(ctx, oprot); _write_err65 == nil && err2 != nil {
        _write_err65 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err65 == nil && err2 != nil {
        _write_err65 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err65 == nil && err2 != nil {
        _write_err65 = thrift.WrapTException(err2)
      }
      if _write_err65 != nil {
        return false, thrift.WrapTException(_write_err65)
      }
      return true, err
    }
  } else {
    result.Success = &retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "get_log", thrift.REPLY, seqId); err2 != nil {
    _write_err65 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err65 == nil && err2 != nil {
    _write_err65 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err65 == nil && err2 != nil {
    _write_err65 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err65 == nil && err2 != nil {
    _write_err65 = thrift.WrapTException(err2)
  }
  if _write_err65 != nil {
    return false, thrift.WrapTException(_write_err65)
  }
  return true, err
}

type beeswaxServiceProcessorGetDefaultConfiguration struct {
  handler BeeswaxService
}

func (p *beeswaxServiceProcessorGetDefaultConfiguration) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err67 error
  args := BeeswaxServiceGetDefaultConfigurationArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "get_default_configuration", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BeeswaxServiceGetDefaultConfigurationResult{}
  if retval, err2 := p.handler.GetDefaultConfiguration(ctx, args.IncludeHadoop); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc68 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get_default_configuration: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "get_default_configuration", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err67 = thrift.WrapTException(err2)
    }
    if err2 := _exc68.Write(ctx, oprot); _write_err67 == nil && err2 != nil {
      _write_err67 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err67 == nil && err2 != nil {
      _write_err67 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err67 == nil && err2 != nil {
      _write_err67 = thrift.WrapTException(err2)
    }
    if _write_err67 != nil {
      return false, thrift.WrapTException(_write_err67)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "get_default_configuration", thrift.REPLY, seqId); err2 != nil {
    _write_err67 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err67 == nil && err2 != nil {
    _write_err67 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err67 == nil && err2 != nil {
    _write_err67 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err67 == nil && err2 != nil {
    _write_err67 = thrift.WrapTException(err2)
  }
  if _write_err67 != nil {
    return false, thrift.WrapTException(_write_err67)
  }
  return true, err
}

type beeswaxServiceProcessorClose struct {
  handler BeeswaxService
}

func (p *beeswaxServiceProcessorClose) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err69 error
  args := BeeswaxServiceCloseArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "close", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BeeswaxServiceCloseResult{}
  if err2 := p.handler.Close(ctx, args.Handle); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    switch v := err2.(type) {
    case *QueryNotFoundException:
      result.Error = v
    case *BeeswaxException:
      result.Error2 = v
    default:
      if errors.Is(err2, thrift.ErrAbandonRequest) {
        return false, thrift.WrapTException(err2)
      }
      _exc70 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing close: " + err2.Error())
      if err2 := oprot.WriteMessageBegin(ctx, "close", thrift.EXCEPTION, seqId); err2 != nil {
        _write_err69 = thrift.WrapTException(err2)
      }
      if err2 := _exc70.Write(ctx, oprot); _write_err69 == nil && err2 != nil {
        _write_err69 = thrift.WrapTException(err2)
      }
      if err2 := oprot.WriteMessageEnd(ctx); _write_err69 == nil && err2 != nil {
        _write_err69 = thrift.WrapTException(err2)
      }
      if err2 := oprot.Flush(ctx); _write_err69 == nil && err2 != nil {
        _write_err69 = thrift.WrapTException(err2)
      }
      if _write_err69 != nil {
        return false, thrift.WrapTException(_write_err69)
      }
      return true, err
    }
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "close", thrift.REPLY, seqId); err2 != nil {
    _write_err69 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err69 == nil && err2 != nil {
    _write_err69 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err69 == nil && err2 != nil {
    _write_err69 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err69 == nil && err2 != nil {
    _write_err69 = thrift.WrapTException(err2)
  }
  if _write_err69 != nil {
    return false, thrift.WrapTException(_write_err69)
  }
  return true, err
}

type beeswaxServiceProcessorClean struct {
  handler BeeswaxService
}

func (p *beeswaxServiceProcessorClean) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err71 error
  args := BeeswaxServiceCleanArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "clean", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := BeeswaxServiceCleanResult{}
  if err2 := p.handler.Clean(ctx, args.LogContext); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc72 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clean: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "clean", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err71 = thrift.WrapTException(err2)
    }
    if err2 := _exc72.Write(ctx, oprot); _write_err71 == nil && err2 != nil {
      _write_err71 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err71 == nil && err2 != nil {
      _write_err71 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err71 == nil && err2 != nil {
      _write_err71 = thrift.WrapTException(err2)
    }
    if _write_err71 != nil {
      return false, thrift.WrapTException(_write_err71)
    }
    return true, err
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "clean", thrift.REPLY, seqId); err2 != nil {
    _write_err71 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err71 == nil && err2 != nil {
    _write_err71 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err71 == nil && err2 != nil {
    _write_err71 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err71 == nil && err2 != nil {
    _write_err71 = thrift.WrapTException(err2)
  }
  if _write_err71 != nil {
    return false, thrift.WrapTException(_write_err71)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Query
type BeeswaxServiceQueryArgs struct {
  Query *Query `thrift:"query,1" db:"query" json:"query"`
}

func NewBeeswaxServiceQueryArgs() *BeeswaxServiceQueryArgs {
  return &BeeswaxServiceQueryArgs{}
}

var BeeswaxServiceQueryArgs_Query_DEFAULT *Query
func (p *BeeswaxServiceQueryArgs) GetQuery() *Query {
  if !p.IsSetQuery() {
    return BeeswaxServiceQueryArgs_Query_DEFAULT
  }
return p.Query
}
func (p *BeeswaxServiceQueryArgs) IsSetQuery() bool {
  return p.Query != nil
}

func (p *BeeswaxServiceQueryArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BeeswaxServiceQueryArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Query = &Query{}
  if err := p.Query.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Query), err)
  }
  return nil
}

func (p *BeeswaxServiceQueryArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BeeswaxServiceQueryArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "query", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query: ", p), err) }
  if err := p.Query.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Query), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query: ", p), err) }
  return err
}

func (p *BeeswaxServiceQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeeswaxServiceQueryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type BeeswaxServiceQueryResult struct {
  Success *QueryHandle `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error *BeeswaxException `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewBeeswaxServiceQueryResult() *BeeswaxServiceQueryResult {
  return &BeeswaxServiceQueryResult{}
}

var BeeswaxServiceQueryResult_Success_DEFAULT *QueryHandle
func (p *BeeswaxServiceQueryResult) GetSuccess() *QueryHandle {
  if !p.IsSetSuccess() {
    return BeeswaxServiceQueryResult_Success_DEFAULT
  }
return p.Success
}
var BeeswaxServiceQueryResult_Error_DEFAULT *BeeswaxException
func (p *BeeswaxServiceQueryResult) GetError() *BeeswaxException {
  if !p.IsSetError() {
    return BeeswaxServiceQueryResult_Error_DEFAULT
  }
return p.Error
}
func (p *BeeswaxServiceQueryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BeeswaxServiceQueryResult) IsSetError() bool {
  return p.Error != nil
}

func (p *BeeswaxServiceQueryResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BeeswaxServiceQueryResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &QueryHandle{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BeeswaxServiceQueryResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &BeeswaxException{
  SQLState: "     ",
}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *BeeswaxServiceQueryResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "query_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BeeswaxServiceQueryResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BeeswaxServiceQueryResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *BeeswaxServiceQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeeswaxServiceQueryResult(%+v)", *p)
}

// Attributes:
//  - Query
//  - ClientCtx
type BeeswaxServiceExecuteAndWaitArgs struct {
  Query *Query `thrift:"query,1" db:"query" json:"query"`
  ClientCtx LogContextId `thrift:"clientCtx,2" db:"clientCtx" json:"clientCtx"`
}

func NewBeeswaxServiceExecuteAndWaitArgs() *BeeswaxServiceExecuteAndWaitArgs {
  return &BeeswaxServiceExecuteAndWaitArgs{}
}

var BeeswaxServiceExecuteAndWaitArgs_Query_DEFAULT *Query
func (p *BeeswaxServiceExecuteAndWaitArgs) GetQuery() *Query {
  if !p.IsSetQuery() {
    return BeeswaxServiceExecuteAndWaitArgs_Query_DEFAULT
  }
return p.Query
}

func (p *BeeswaxServiceExecuteAndWaitArgs) GetClientCtx() LogContextId {
  return p.ClientCtx
}
func (p *BeeswaxServiceExecuteAndWaitArgs) IsSetQuery() bool {
  return p.Query != nil
}

func (p *BeeswaxServiceExecuteAndWaitArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BeeswaxServiceExecuteAndWaitArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Query = &Query{}
  if err := p.Query.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Query), err)
  }
  return nil
}

func (p *BeeswaxServiceExecuteAndWaitArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := LogContextId(v)
  p.ClientCtx = temp
}
  return nil
}

func (p *BeeswaxServiceExecuteAndWaitArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "executeAndWait_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BeeswaxServiceExecuteAndWaitArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "query", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query: ", p), err) }
  if err := p.Query.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Query), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query: ", p), err) }
  return err
}

func (p *BeeswaxServiceExecuteAndWaitArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "clientCtx", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:clientCtx: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ClientCtx)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clientCtx (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:clientCtx: ", p), err) }
  return err
}

func (p *BeeswaxServiceExecuteAndWaitArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeeswaxServiceExecuteAndWaitArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type BeeswaxServiceExecuteAndWaitResult struct {
  Success *QueryHandle `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error *BeeswaxException `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewBeeswaxServiceExecuteAndWaitResult() *BeeswaxServiceExecuteAndWaitResult {
  return &BeeswaxServiceExecuteAndWaitResult{}
}

var BeeswaxServiceExecuteAndWaitResult_Success_DEFAULT *QueryHandle
func (p *BeeswaxServiceExecuteAndWaitResult) GetSuccess() *QueryHandle {
  if !p.IsSetSuccess() {
    return BeeswaxServiceExecuteAndWaitResult_Success_DEFAULT
  }
return p.Success
}
var BeeswaxServiceExecuteAndWaitResult_Error_DEFAULT *BeeswaxException
func (p *BeeswaxServiceExecuteAndWaitResult) GetError() *BeeswaxException {
  if !p.IsSetError() {
    return BeeswaxServiceExecuteAndWaitResult_Error_DEFAULT
  }
return p.Error
}
func (p *BeeswaxServiceExecuteAndWaitResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BeeswaxServiceExecuteAndWaitResult) IsSetError() bool {
  return p.Error != nil
}

func (p *BeeswaxServiceExecuteAndWaitResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BeeswaxServiceExecuteAndWaitResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &QueryHandle{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BeeswaxServiceExecuteAndWaitResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &BeeswaxException{
  SQLState: "     ",
}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *BeeswaxServiceExecuteAndWaitResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "executeAndWait_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BeeswaxServiceExecuteAndWaitResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BeeswaxServiceExecuteAndWaitResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *BeeswaxServiceExecuteAndWaitResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeeswaxServiceExecuteAndWaitResult(%+v)", *p)
}

// Attributes:
//  - Query
type BeeswaxServiceExplainArgs struct {
  Query *Query `thrift:"query,1" db:"query" json:"query"`
}

func NewBeeswaxServiceExplainArgs() *BeeswaxServiceExplainArgs {
  return &BeeswaxServiceExplainArgs{}
}

var BeeswaxServiceExplainArgs_Query_DEFAULT *Query
func (p *BeeswaxServiceExplainArgs) GetQuery() *Query {
  if !p.IsSetQuery() {
    return BeeswaxServiceExplainArgs_Query_DEFAULT
  }
return p.Query
}
func (p *BeeswaxServiceExplainArgs) IsSetQuery() bool {
  return p.Query != nil
}

func (p *BeeswaxServiceExplainArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BeeswaxServiceExplainArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Query = &Query{}
  if err := p.Query.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Query), err)
  }
  return nil
}

func (p *BeeswaxServiceExplainArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "explain_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BeeswaxServiceExplainArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "query", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query: ", p), err) }
  if err := p.Query.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Query), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query: ", p), err) }
  return err
}

func (p *BeeswaxServiceExplainArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeeswaxServiceExplainArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type BeeswaxServiceExplainResult struct {
  Success *QueryExplanation `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error *BeeswaxException `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewBeeswaxServiceExplainResult() *BeeswaxServiceExplainResult {
  return &BeeswaxServiceExplainResult{}
}

var BeeswaxServiceExplainResult_Success_DEFAULT *QueryExplanation
func (p *BeeswaxServiceExplainResult) GetSuccess() *QueryExplanation {
  if !p.IsSetSuccess() {
    return BeeswaxServiceExplainResult_Success_DEFAULT
  }
return p.Success
}
var BeeswaxServiceExplainResult_Error_DEFAULT *BeeswaxException
func (p *BeeswaxServiceExplainResult) GetError() *BeeswaxException {
  if !p.IsSetError() {
    return BeeswaxServiceExplainResult_Error_DEFAULT
  }
return p.Error
}
func (p *BeeswaxServiceExplainResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BeeswaxServiceExplainResult) IsSetError() bool {
  return p.Error != nil
}

func (p *BeeswaxServiceExplainResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BeeswaxServiceExplainResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &QueryExplanation{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BeeswaxServiceExplainResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &BeeswaxException{
  SQLState: "     ",
}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *BeeswaxServiceExplainResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "explain_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BeeswaxServiceExplainResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BeeswaxServiceExplainResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *BeeswaxServiceExplainResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeeswaxServiceExplainResult(%+v)", *p)
}

// Attributes:
//  - QueryID
//  - StartOver
//  - FetchSize
type BeeswaxServiceFetchArgs struct {
  QueryID *QueryHandle `thrift:"query_id,1" db:"query_id" json:"query_id"`
  StartOver bool `thrift:"start_over,2" db:"start_over" json:"start_over"`
  FetchSize int32 `thrift:"fetch_size,3" db:"fetch_size" json:"fetch_size"`
}

func NewBeeswaxServiceFetchArgs() *BeeswaxServiceFetchArgs {
  return &BeeswaxServiceFetchArgs{
FetchSize: -1,
}
}

var BeeswaxServiceFetchArgs_QueryID_DEFAULT *QueryHandle
func (p *BeeswaxServiceFetchArgs) GetQueryID() *QueryHandle {
  if !p.IsSetQueryID() {
    return BeeswaxServiceFetchArgs_QueryID_DEFAULT
  }
return p.QueryID
}

func (p *BeeswaxServiceFetchArgs) GetStartOver() bool {
  return p.StartOver
}

func (p *BeeswaxServiceFetchArgs) GetFetchSize() int32 {
  return p.FetchSize
}
func (p *BeeswaxServiceFetchArgs) IsSetQueryID() bool {
  return p.QueryID != nil
}

func (p *BeeswaxServiceFetchArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BeeswaxServiceFetchArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.QueryID = &QueryHandle{}
  if err := p.QueryID.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.QueryID), err)
  }
  return nil
}

func (p *BeeswaxServiceFetchArgs)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StartOver = v
}
  return nil
}

func (p *BeeswaxServiceFetchArgs)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FetchSize = v
}
  return nil
}

func (p *BeeswaxServiceFetchArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fetch_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BeeswaxServiceFetchArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "query_id", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:query_id: ", p), err) }
  if err := p.QueryID.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.QueryID), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:query_id: ", p), err) }
  return err
}

func (p *BeeswaxServiceFetchArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "start_over", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:start_over: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.StartOver)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.start_over (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:start_over: ", p), err) }
  return err
}

func (p *BeeswaxServiceFetchArgs) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fetch_size", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fetch_size: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.FetchSize)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fetch_size (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fetch_size: ", p), err) }
  return err
}

func (p *BeeswaxServiceFetchArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeeswaxServiceFetchArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
//  - Error2
type BeeswaxServiceFetchResult struct {
  Success *Results `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error *QueryNotFoundException `thrift:"error,1" db:"error" json:"error,omitempty"`
  Error2 *BeeswaxException `thrift:"error2,2" db:"error2" json:"error2,omitempty"`
}

func NewBeeswaxServiceFetchResult() *BeeswaxServiceFetchResult {
  return &BeeswaxServiceFetchResult{}
}

var BeeswaxServiceFetchResult_Success_DEFAULT *Results
func (p *BeeswaxServiceFetchResult) GetSuccess() *Results {
  if !p.IsSetSuccess() {
    return BeeswaxServiceFetchResult_Success_DEFAULT
  }
return p.Success
}
var BeeswaxServiceFetchResult_Error_DEFAULT *QueryNotFoundException
func (p *BeeswaxServiceFetchResult) GetError() *QueryNotFoundException {
  if !p.IsSetError() {
    return BeeswaxServiceFetchResult_Error_DEFAULT
  }
return p.Error
}
var BeeswaxServiceFetchResult_Error2_DEFAULT *BeeswaxException
func (p *BeeswaxServiceFetchResult) GetError2() *BeeswaxException {
  if !p.IsSetError2() {
    return BeeswaxServiceFetchResult_Error2_DEFAULT
  }
return p.Error2
}
func (p *BeeswaxServiceFetchResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BeeswaxServiceFetchResult) IsSetError() bool {
  return p.Error != nil
}

func (p *BeeswaxServiceFetchResult) IsSetError2() bool {
  return p.Error2 != nil
}

func (p *BeeswaxServiceFetchResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BeeswaxServiceFetchResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &Results{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BeeswaxServiceFetchResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &QueryNotFoundException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *BeeswaxServiceFetchResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error2 = &BeeswaxException{
  SQLState: "     ",
}
  if err := p.Error2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error2), err)
  }
  return nil
}

func (p *BeeswaxServiceFetchResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "fetch_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BeeswaxServiceFetchResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BeeswaxServiceFetchResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *BeeswaxServiceFetchResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError2() {
    if err := oprot.WriteFieldBegin(ctx, "error2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error2: ", p), err) }
    if err := p.Error2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error2: ", p), err) }
  }
  return err
}

func (p *BeeswaxServiceFetchResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeeswaxServiceFetchResult(%+v)", *p)
}

// Attributes:
//  - Handle
type BeeswaxServiceGetStateArgs struct {
  Handle *QueryHandle `thrift:"handle,1" db:"handle" json:"handle"`
}

func NewBeeswaxServiceGetStateArgs() *BeeswaxServiceGetStateArgs {
  return &BeeswaxServiceGetStateArgs{}
}

var BeeswaxServiceGetStateArgs_Handle_DEFAULT *QueryHandle
func (p *BeeswaxServiceGetStateArgs) GetHandle() *QueryHandle {
  if !p.IsSetHandle() {
    return BeeswaxServiceGetStateArgs_Handle_DEFAULT
  }
return p.Handle
}
func (p *BeeswaxServiceGetStateArgs) IsSetHandle() bool {
  return p.Handle != nil
}

func (p *BeeswaxServiceGetStateArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BeeswaxServiceGetStateArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Handle = &QueryHandle{}
  if err := p.Handle.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Handle), err)
  }
  return nil
}

func (p *BeeswaxServiceGetStateArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_state_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BeeswaxServiceGetStateArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "handle", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:handle: ", p), err) }
  if err := p.Handle.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Handle), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:handle: ", p), err) }
  return err
}

func (p *BeeswaxServiceGetStateArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeeswaxServiceGetStateArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type BeeswaxServiceGetStateResult struct {
  Success *QueryState `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error *QueryNotFoundException `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewBeeswaxServiceGetStateResult() *BeeswaxServiceGetStateResult {
  return &BeeswaxServiceGetStateResult{}
}

var BeeswaxServiceGetStateResult_Success_DEFAULT QueryState
func (p *BeeswaxServiceGetStateResult) GetSuccess() QueryState {
  if !p.IsSetSuccess() {
    return BeeswaxServiceGetStateResult_Success_DEFAULT
  }
return *p.Success
}
var BeeswaxServiceGetStateResult_Error_DEFAULT *QueryNotFoundException
func (p *BeeswaxServiceGetStateResult) GetError() *QueryNotFoundException {
  if !p.IsSetError() {
    return BeeswaxServiceGetStateResult_Error_DEFAULT
  }
return p.Error
}
func (p *BeeswaxServiceGetStateResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BeeswaxServiceGetStateResult) IsSetError() bool {
  return p.Error != nil
}

func (p *BeeswaxServiceGetStateResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BeeswaxServiceGetStateResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := QueryState(v)
  p.Success = &temp
}
  return nil
}

func (p *BeeswaxServiceGetStateResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &QueryNotFoundException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *BeeswaxServiceGetStateResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_state_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BeeswaxServiceGetStateResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BeeswaxServiceGetStateResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *BeeswaxServiceGetStateResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeeswaxServiceGetStateResult(%+v)", *p)
}

// Attributes:
//  - Handle
type BeeswaxServiceGetResultsMetadataArgs struct {
  Handle *QueryHandle `thrift:"handle,1" db:"handle" json:"handle"`
}

func NewBeeswaxServiceGetResultsMetadataArgs() *BeeswaxServiceGetResultsMetadataArgs {
  return &BeeswaxServiceGetResultsMetadataArgs{}
}

var BeeswaxServiceGetResultsMetadataArgs_Handle_DEFAULT *QueryHandle
func (p *BeeswaxServiceGetResultsMetadataArgs) GetHandle() *QueryHandle {
  if !p.IsSetHandle() {
    return BeeswaxServiceGetResultsMetadataArgs_Handle_DEFAULT
  }
return p.Handle
}
func (p *BeeswaxServiceGetResultsMetadataArgs) IsSetHandle() bool {
  return p.Handle != nil
}

func (p *BeeswaxServiceGetResultsMetadataArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BeeswaxServiceGetResultsMetadataArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Handle = &QueryHandle{}
  if err := p.Handle.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Handle), err)
  }
  return nil
}

func (p *BeeswaxServiceGetResultsMetadataArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_results_metadata_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BeeswaxServiceGetResultsMetadataArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "handle", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:handle: ", p), err) }
  if err := p.Handle.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Handle), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:handle: ", p), err) }
  return err
}

func (p *BeeswaxServiceGetResultsMetadataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeeswaxServiceGetResultsMetadataArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type BeeswaxServiceGetResultsMetadataResult struct {
  Success *ResultsMetadata `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error *QueryNotFoundException `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewBeeswaxServiceGetResultsMetadataResult() *BeeswaxServiceGetResultsMetadataResult {
  return &BeeswaxServiceGetResultsMetadataResult{}
}

var BeeswaxServiceGetResultsMetadataResult_Success_DEFAULT *ResultsMetadata
func (p *BeeswaxServiceGetResultsMetadataResult) GetSuccess() *ResultsMetadata {
  if !p.IsSetSuccess() {
    return BeeswaxServiceGetResultsMetadataResult_Success_DEFAULT
  }
return p.Success
}
var BeeswaxServiceGetResultsMetadataResult_Error_DEFAULT *QueryNotFoundException
func (p *BeeswaxServiceGetResultsMetadataResult) GetError() *QueryNotFoundException {
  if !p.IsSetError() {
    return BeeswaxServiceGetResultsMetadataResult_Error_DEFAULT
  }
return p.Error
}
func (p *BeeswaxServiceGetResultsMetadataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BeeswaxServiceGetResultsMetadataResult) IsSetError() bool {
  return p.Error != nil
}

func (p *BeeswaxServiceGetResultsMetadataResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BeeswaxServiceGetResultsMetadataResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &ResultsMetadata{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *BeeswaxServiceGetResultsMetadataResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &QueryNotFoundException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *BeeswaxServiceGetResultsMetadataResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_results_metadata_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BeeswaxServiceGetResultsMetadataResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BeeswaxServiceGetResultsMetadataResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *BeeswaxServiceGetResultsMetadataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeeswaxServiceGetResultsMetadataResult(%+v)", *p)
}

// Attributes:
//  - S
type BeeswaxServiceEchoArgs struct {
  S string `thrift:"s,1" db:"s" json:"s"`
}

func NewBeeswaxServiceEchoArgs() *BeeswaxServiceEchoArgs {
  return &BeeswaxServiceEchoArgs{}
}


func (p *BeeswaxServiceEchoArgs) GetS() string {
  return p.S
}
func (p *BeeswaxServiceEchoArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BeeswaxServiceEchoArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.S = v
}
  return nil
}

func (p *BeeswaxServiceEchoArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "echo_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BeeswaxServiceEchoArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "s", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:s: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.S)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.s (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:s: ", p), err) }
  return err
}

func (p *BeeswaxServiceEchoArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeeswaxServiceEchoArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BeeswaxServiceEchoResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBeeswaxServiceEchoResult() *BeeswaxServiceEchoResult {
  return &BeeswaxServiceEchoResult{}
}

var BeeswaxServiceEchoResult_Success_DEFAULT string
func (p *BeeswaxServiceEchoResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return BeeswaxServiceEchoResult_Success_DEFAULT
  }
return *p.Success
}
func (p *BeeswaxServiceEchoResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BeeswaxServiceEchoResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BeeswaxServiceEchoResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *BeeswaxServiceEchoResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "echo_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BeeswaxServiceEchoResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BeeswaxServiceEchoResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeeswaxServiceEchoResult(%+v)", *p)
}

type BeeswaxServiceDumpConfigArgs struct {
}

func NewBeeswaxServiceDumpConfigArgs() *BeeswaxServiceDumpConfigArgs {
  return &BeeswaxServiceDumpConfigArgs{}
}

func (p *BeeswaxServiceDumpConfigArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BeeswaxServiceDumpConfigArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dump_config_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BeeswaxServiceDumpConfigArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeeswaxServiceDumpConfigArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BeeswaxServiceDumpConfigResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBeeswaxServiceDumpConfigResult() *BeeswaxServiceDumpConfigResult {
  return &BeeswaxServiceDumpConfigResult{}
}

var BeeswaxServiceDumpConfigResult_Success_DEFAULT string
func (p *BeeswaxServiceDumpConfigResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return BeeswaxServiceDumpConfigResult_Success_DEFAULT
  }
return *p.Success
}
func (p *BeeswaxServiceDumpConfigResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BeeswaxServiceDumpConfigResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BeeswaxServiceDumpConfigResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *BeeswaxServiceDumpConfigResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "dump_config_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BeeswaxServiceDumpConfigResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BeeswaxServiceDumpConfigResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeeswaxServiceDumpConfigResult(%+v)", *p)
}

// Attributes:
//  - Context
type BeeswaxServiceGetLogArgs struct {
  Context LogContextId `thrift:"context,1" db:"context" json:"context"`
}

func NewBeeswaxServiceGetLogArgs() *BeeswaxServiceGetLogArgs {
  return &BeeswaxServiceGetLogArgs{}
}


func (p *BeeswaxServiceGetLogArgs) GetContext() LogContextId {
  return p.Context
}
func (p *BeeswaxServiceGetLogArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BeeswaxServiceGetLogArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := LogContextId(v)
  p.Context = temp
}
  return nil
}

func (p *BeeswaxServiceGetLogArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_log_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BeeswaxServiceGetLogArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "context", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:context: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Context)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.context (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:context: ", p), err) }
  return err
}

func (p *BeeswaxServiceGetLogArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeeswaxServiceGetLogArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Error
type BeeswaxServiceGetLogResult struct {
  Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
  Error *QueryNotFoundException `thrift:"error,1" db:"error" json:"error,omitempty"`
}

func NewBeeswaxServiceGetLogResult() *BeeswaxServiceGetLogResult {
  return &BeeswaxServiceGetLogResult{}
}

var BeeswaxServiceGetLogResult_Success_DEFAULT string
func (p *BeeswaxServiceGetLogResult) GetSuccess() string {
  if !p.IsSetSuccess() {
    return BeeswaxServiceGetLogResult_Success_DEFAULT
  }
return *p.Success
}
var BeeswaxServiceGetLogResult_Error_DEFAULT *QueryNotFoundException
func (p *BeeswaxServiceGetLogResult) GetError() *QueryNotFoundException {
  if !p.IsSetError() {
    return BeeswaxServiceGetLogResult_Error_DEFAULT
  }
return p.Error
}
func (p *BeeswaxServiceGetLogResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BeeswaxServiceGetLogResult) IsSetError() bool {
  return p.Error != nil
}

func (p *BeeswaxServiceGetLogResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BeeswaxServiceGetLogResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *BeeswaxServiceGetLogResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &QueryNotFoundException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *BeeswaxServiceGetLogResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_log_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BeeswaxServiceGetLogResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BeeswaxServiceGetLogResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *BeeswaxServiceGetLogResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeeswaxServiceGetLogResult(%+v)", *p)
}

// Attributes:
//  - IncludeHadoop
type BeeswaxServiceGetDefaultConfigurationArgs struct {
  IncludeHadoop bool `thrift:"include_hadoop,1" db:"include_hadoop" json:"include_hadoop"`
}

func NewBeeswaxServiceGetDefaultConfigurationArgs() *BeeswaxServiceGetDefaultConfigurationArgs {
  return &BeeswaxServiceGetDefaultConfigurationArgs{}
}


func (p *BeeswaxServiceGetDefaultConfigurationArgs) GetIncludeHadoop() bool {
  return p.IncludeHadoop
}
func (p *BeeswaxServiceGetDefaultConfigurationArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BeeswaxServiceGetDefaultConfigurationArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IncludeHadoop = v
}
  return nil
}

func (p *BeeswaxServiceGetDefaultConfigurationArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_default_configuration_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BeeswaxServiceGetDefaultConfigurationArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "include_hadoop", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:include_hadoop: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IncludeHadoop)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.include_hadoop (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:include_hadoop: ", p), err) }
  return err
}

func (p *BeeswaxServiceGetDefaultConfigurationArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeeswaxServiceGetDefaultConfigurationArgs(%+v)", *p)
}

// Attributes:
//  - Success
type BeeswaxServiceGetDefaultConfigurationResult struct {
  Success []*ConfigVariable `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewBeeswaxServiceGetDefaultConfigurationResult() *BeeswaxServiceGetDefaultConfigurationResult {
  return &BeeswaxServiceGetDefaultConfigurationResult{}
}

var BeeswaxServiceGetDefaultConfigurationResult_Success_DEFAULT []*ConfigVariable

func (p *BeeswaxServiceGetDefaultConfigurationResult) GetSuccess() []*ConfigVariable {
  return p.Success
}
func (p *BeeswaxServiceGetDefaultConfigurationResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *BeeswaxServiceGetDefaultConfigurationResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BeeswaxServiceGetDefaultConfigurationResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ConfigVariable, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
    _elem73 := &ConfigVariable{}
    if err := _elem73.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem73), err)
    }
    p.Success = append(p.Success, _elem73)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *BeeswaxServiceGetDefaultConfigurationResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "get_default_configuration_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BeeswaxServiceGetDefaultConfigurationResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *BeeswaxServiceGetDefaultConfigurationResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeeswaxServiceGetDefaultConfigurationResult(%+v)", *p)
}

// Attributes:
//  - Handle
type BeeswaxServiceCloseArgs struct {
  Handle *QueryHandle `thrift:"handle,1" db:"handle" json:"handle"`
}

func NewBeeswaxServiceCloseArgs() *BeeswaxServiceCloseArgs {
  return &BeeswaxServiceCloseArgs{}
}

var BeeswaxServiceCloseArgs_Handle_DEFAULT *QueryHandle
func (p *BeeswaxServiceCloseArgs) GetHandle() *QueryHandle {
  if !p.IsSetHandle() {
    return BeeswaxServiceCloseArgs_Handle_DEFAULT
  }
return p.Handle
}
func (p *BeeswaxServiceCloseArgs) IsSetHandle() bool {
  return p.Handle != nil
}

func (p *BeeswaxServiceCloseArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BeeswaxServiceCloseArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Handle = &QueryHandle{}
  if err := p.Handle.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Handle), err)
  }
  return nil
}

func (p *BeeswaxServiceCloseArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "close_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BeeswaxServiceCloseArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "handle", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:handle: ", p), err) }
  if err := p.Handle.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Handle), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:handle: ", p), err) }
  return err
}

func (p *BeeswaxServiceCloseArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeeswaxServiceCloseArgs(%+v)", *p)
}

// Attributes:
//  - Error
//  - Error2
type BeeswaxServiceCloseResult struct {
  Error *QueryNotFoundException `thrift:"error,1" db:"error" json:"error,omitempty"`
  Error2 *BeeswaxException `thrift:"error2,2" db:"error2" json:"error2,omitempty"`
}

func NewBeeswaxServiceCloseResult() *BeeswaxServiceCloseResult {
  return &BeeswaxServiceCloseResult{}
}

var BeeswaxServiceCloseResult_Error_DEFAULT *QueryNotFoundException
func (p *BeeswaxServiceCloseResult) GetError() *QueryNotFoundException {
  if !p.IsSetError() {
    return BeeswaxServiceCloseResult_Error_DEFAULT
  }
return p.Error
}
var BeeswaxServiceCloseResult_Error2_DEFAULT *BeeswaxException
func (p *BeeswaxServiceCloseResult) GetError2() *BeeswaxException {
  if !p.IsSetError2() {
    return BeeswaxServiceCloseResult_Error2_DEFAULT
  }
return p.Error2
}
func (p *BeeswaxServiceCloseResult) IsSetError() bool {
  return p.Error != nil
}

func (p *BeeswaxServiceCloseResult) IsSetError2() bool {
  return p.Error2 != nil
}

func (p *BeeswaxServiceCloseResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BeeswaxServiceCloseResult)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error = &QueryNotFoundException{}
  if err := p.Error.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error), err)
  }
  return nil
}

func (p *BeeswaxServiceCloseResult)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Error2 = &BeeswaxException{
  SQLState: "     ",
}
  if err := p.Error2.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Error2), err)
  }
  return nil
}

func (p *BeeswaxServiceCloseResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "close_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BeeswaxServiceCloseResult) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError() {
    if err := oprot.WriteFieldBegin(ctx, "error", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error: ", p), err) }
    if err := p.Error.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error: ", p), err) }
  }
  return err
}

func (p *BeeswaxServiceCloseResult) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetError2() {
    if err := oprot.WriteFieldBegin(ctx, "error2", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:error2: ", p), err) }
    if err := p.Error2.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Error2), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:error2: ", p), err) }
  }
  return err
}

func (p *BeeswaxServiceCloseResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeeswaxServiceCloseResult(%+v)", *p)
}

// Attributes:
//  - LogContext
type BeeswaxServiceCleanArgs struct {
  LogContext LogContextId `thrift:"log_context,1" db:"log_context" json:"log_context"`
}

func NewBeeswaxServiceCleanArgs() *BeeswaxServiceCleanArgs {
  return &BeeswaxServiceCleanArgs{}
}


func (p *BeeswaxServiceCleanArgs) GetLogContext() LogContextId {
  return p.LogContext
}
func (p *BeeswaxServiceCleanArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BeeswaxServiceCleanArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := LogContextId(v)
  p.LogContext = temp
}
  return nil
}

func (p *BeeswaxServiceCleanArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "clean_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BeeswaxServiceCleanArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "log_context", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:log_context: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LogContext)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.log_context (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:log_context: ", p), err) }
  return err
}

func (p *BeeswaxServiceCleanArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeeswaxServiceCleanArgs(%+v)", *p)
}

type BeeswaxServiceCleanResult struct {
}

func NewBeeswaxServiceCleanResult() *BeeswaxServiceCleanResult {
  return &BeeswaxServiceCleanResult{}
}

func (p *BeeswaxServiceCleanResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *BeeswaxServiceCleanResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "clean_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *BeeswaxServiceCleanResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("BeeswaxServiceCleanResult(%+v)", *p)
}


