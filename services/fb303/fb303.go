// Code generated by Thrift Compiler (0.18.1). DO NOT EDIT.

package fb303

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"regexp"
	"strings"
	"time"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

// Common status reporting mechanism across all services
type FbStatus int64

const (
	FbStatus_DEAD     FbStatus = 0
	FbStatus_STARTING FbStatus = 1
	FbStatus_ALIVE    FbStatus = 2
	FbStatus_STOPPING FbStatus = 3
	FbStatus_STOPPED  FbStatus = 4
	FbStatus_WARNING  FbStatus = 5
)

func (p FbStatus) String() string {
	switch p {
	case FbStatus_DEAD:
		return "DEAD"
	case FbStatus_STARTING:
		return "STARTING"
	case FbStatus_ALIVE:
		return "ALIVE"
	case FbStatus_STOPPING:
		return "STOPPING"
	case FbStatus_STOPPED:
		return "STOPPED"
	case FbStatus_WARNING:
		return "WARNING"
	}
	return "<UNSET>"
}

func FbStatusFromString(s string) (FbStatus, error) {
	switch s {
	case "DEAD":
		return FbStatus_DEAD, nil
	case "STARTING":
		return FbStatus_STARTING, nil
	case "ALIVE":
		return FbStatus_ALIVE, nil
	case "STOPPING":
		return FbStatus_STOPPING, nil
	case "STOPPED":
		return FbStatus_STOPPED, nil
	case "WARNING":
		return FbStatus_WARNING, nil
	}
	return FbStatus(0), fmt.Errorf("not a valid FbStatus string")
}

func FbStatusPtr(v FbStatus) *FbStatus { return &v }

func (p FbStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *FbStatus) UnmarshalText(text []byte) error {
	q, err := FbStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

func (p *FbStatus) Scan(value interface{}) error {
	v, ok := value.(int64)
	if !ok {
		return errors.New("Scan value is not int64")
	}
	*p = FbStatus(v)
	return nil
}

func (p *FbStatus) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type FacebookService interface { //Standard base service

	// Returns a descriptive name of the service
	GetName(ctx context.Context) (_r string, _err error)
	// Returns the version of the service
	GetVersion(ctx context.Context) (_r string, _err error)
	// Gets the status of this service
	GetStatus(ctx context.Context) (_r FbStatus, _err error)
	// User friendly description of status, such as why the service is in
	// the dead or warning state, or what is being started or stopped.
	GetStatusDetails(ctx context.Context) (_r string, _err error)
	// Gets the counters for this service
	GetCounters(ctx context.Context) (_r map[string]int64, _err error)
	// Gets the value of a single counter
	//
	// Parameters:
	//  - Key
	GetCounter(ctx context.Context, key string) (_r int64, _err error)
	// Sets an option
	//
	// Parameters:
	//  - Key
	//  - Value
	SetOption(ctx context.Context, key string, value string) (_err error)
	// Gets an option
	//
	// Parameters:
	//  - Key
	GetOption(ctx context.Context, key string) (_r string, _err error)
	// Gets all options
	GetOptions(ctx context.Context) (_r map[string]string, _err error)
	// Returns a CPU profile over the given time interval (client and server
	// must agree on the profile format).
	//
	// Parameters:
	//  - ProfileDurationInSec
	GetCpuProfile(ctx context.Context, profileDurationInSec int32) (_r string, _err error)
	// Returns the unix time that the server has been running since
	AliveSince(ctx context.Context) (_r int64, _err error)
	// Tell the server to reload its configuration, reopen log files, etc
	Reinitialize(ctx context.Context) (_err error)
	// Suggest a shutdown to the server
	Shutdown(ctx context.Context) (_err error)
}

// Standard base service
type FacebookServiceClient struct {
	c    thrift.TClient
	meta thrift.ResponseMeta
}

func NewFacebookServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *FacebookServiceClient {
	return &FacebookServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewFacebookServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *FacebookServiceClient {
	return &FacebookServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewFacebookServiceClient(c thrift.TClient) *FacebookServiceClient {
	return &FacebookServiceClient{
		c: c,
	}
}

func (p *FacebookServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *FacebookServiceClient) LastResponseMeta_() thrift.ResponseMeta {
	return p.meta
}

func (p *FacebookServiceClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
	p.meta = meta
}

// Returns a descriptive name of the service
func (p *FacebookServiceClient) GetName(ctx context.Context) (_r string, _err error) {
	var _args0 FacebookServiceGetNameArgs
	var _result2 FacebookServiceGetNameResult
	var _meta1 thrift.ResponseMeta
	_meta1, _err = p.Client_().Call(ctx, "getName", &_args0, &_result2)
	p.SetLastResponseMeta_(_meta1)
	if _err != nil {
		return
	}
	return _result2.GetSuccess(), nil
}

// Returns the version of the service
func (p *FacebookServiceClient) GetVersion(ctx context.Context) (_r string, _err error) {
	var _args3 FacebookServiceGetVersionArgs
	var _result5 FacebookServiceGetVersionResult
	var _meta4 thrift.ResponseMeta
	_meta4, _err = p.Client_().Call(ctx, "getVersion", &_args3, &_result5)
	p.SetLastResponseMeta_(_meta4)
	if _err != nil {
		return
	}
	return _result5.GetSuccess(), nil
}

// Gets the status of this service
func (p *FacebookServiceClient) GetStatus(ctx context.Context) (_r FbStatus, _err error) {
	var _args6 FacebookServiceGetStatusArgs
	var _result8 FacebookServiceGetStatusResult
	var _meta7 thrift.ResponseMeta
	_meta7, _err = p.Client_().Call(ctx, "getStatus", &_args6, &_result8)
	p.SetLastResponseMeta_(_meta7)
	if _err != nil {
		return
	}
	return _result8.GetSuccess(), nil
}

// User friendly description of status, such as why the service is in
// the dead or warning state, or what is being started or stopped.
func (p *FacebookServiceClient) GetStatusDetails(ctx context.Context) (_r string, _err error) {
	var _args9 FacebookServiceGetStatusDetailsArgs
	var _result11 FacebookServiceGetStatusDetailsResult
	var _meta10 thrift.ResponseMeta
	_meta10, _err = p.Client_().Call(ctx, "getStatusDetails", &_args9, &_result11)
	p.SetLastResponseMeta_(_meta10)
	if _err != nil {
		return
	}
	return _result11.GetSuccess(), nil
}

// Gets the counters for this service
func (p *FacebookServiceClient) GetCounters(ctx context.Context) (_r map[string]int64, _err error) {
	var _args12 FacebookServiceGetCountersArgs
	var _result14 FacebookServiceGetCountersResult
	var _meta13 thrift.ResponseMeta
	_meta13, _err = p.Client_().Call(ctx, "getCounters", &_args12, &_result14)
	p.SetLastResponseMeta_(_meta13)
	if _err != nil {
		return
	}
	return _result14.GetSuccess(), nil
}

// Gets the value of a single counter
//
// Parameters:
//   - Key
func (p *FacebookServiceClient) GetCounter(ctx context.Context, key string) (_r int64, _err error) {
	var _args15 FacebookServiceGetCounterArgs
	_args15.Key = key
	var _result17 FacebookServiceGetCounterResult
	var _meta16 thrift.ResponseMeta
	_meta16, _err = p.Client_().Call(ctx, "getCounter", &_args15, &_result17)
	p.SetLastResponseMeta_(_meta16)
	if _err != nil {
		return
	}
	return _result17.GetSuccess(), nil
}

// Sets an option
//
// Parameters:
//   - Key
//   - Value
func (p *FacebookServiceClient) SetOption(ctx context.Context, key string, value string) (_err error) {
	var _args18 FacebookServiceSetOptionArgs
	_args18.Key = key
	_args18.Value = value
	var _result20 FacebookServiceSetOptionResult
	var _meta19 thrift.ResponseMeta
	_meta19, _err = p.Client_().Call(ctx, "setOption", &_args18, &_result20)
	p.SetLastResponseMeta_(_meta19)
	if _err != nil {
		return
	}
	return nil
}

// Gets an option
//
// Parameters:
//   - Key
func (p *FacebookServiceClient) GetOption(ctx context.Context, key string) (_r string, _err error) {
	var _args21 FacebookServiceGetOptionArgs
	_args21.Key = key
	var _result23 FacebookServiceGetOptionResult
	var _meta22 thrift.ResponseMeta
	_meta22, _err = p.Client_().Call(ctx, "getOption", &_args21, &_result23)
	p.SetLastResponseMeta_(_meta22)
	if _err != nil {
		return
	}
	return _result23.GetSuccess(), nil
}

// Gets all options
func (p *FacebookServiceClient) GetOptions(ctx context.Context) (_r map[string]string, _err error) {
	var _args24 FacebookServiceGetOptionsArgs
	var _result26 FacebookServiceGetOptionsResult
	var _meta25 thrift.ResponseMeta
	_meta25, _err = p.Client_().Call(ctx, "getOptions", &_args24, &_result26)
	p.SetLastResponseMeta_(_meta25)
	if _err != nil {
		return
	}
	return _result26.GetSuccess(), nil
}

// Returns a CPU profile over the given time interval (client and server
// must agree on the profile format).
//
// Parameters:
//   - ProfileDurationInSec
func (p *FacebookServiceClient) GetCpuProfile(ctx context.Context, profileDurationInSec int32) (_r string, _err error) {
	var _args27 FacebookServiceGetCpuProfileArgs
	_args27.ProfileDurationInSec = profileDurationInSec
	var _result29 FacebookServiceGetCpuProfileResult
	var _meta28 thrift.ResponseMeta
	_meta28, _err = p.Client_().Call(ctx, "getCpuProfile", &_args27, &_result29)
	p.SetLastResponseMeta_(_meta28)
	if _err != nil {
		return
	}
	return _result29.GetSuccess(), nil
}

// Returns the unix time that the server has been running since
func (p *FacebookServiceClient) AliveSince(ctx context.Context) (_r int64, _err error) {
	var _args30 FacebookServiceAliveSinceArgs
	var _result32 FacebookServiceAliveSinceResult
	var _meta31 thrift.ResponseMeta
	_meta31, _err = p.Client_().Call(ctx, "aliveSince", &_args30, &_result32)
	p.SetLastResponseMeta_(_meta31)
	if _err != nil {
		return
	}
	return _result32.GetSuccess(), nil
}

// Tell the server to reload its configuration, reopen log files, etc
func (p *FacebookServiceClient) Reinitialize(ctx context.Context) (_err error) {
	var _args33 FacebookServiceReinitializeArgs
	p.SetLastResponseMeta_(thrift.ResponseMeta{})
	if _, err := p.Client_().Call(ctx, "reinitialize", &_args33, nil); err != nil {
		return err
	}
	return nil
}

// Suggest a shutdown to the server
func (p *FacebookServiceClient) Shutdown(ctx context.Context) (_err error) {
	var _args34 FacebookServiceShutdownArgs
	p.SetLastResponseMeta_(thrift.ResponseMeta{})
	if _, err := p.Client_().Call(ctx, "shutdown", &_args34, nil); err != nil {
		return err
	}
	return nil
}

type FacebookServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      FacebookService
}

func (p *FacebookServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *FacebookServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *FacebookServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewFacebookServiceProcessor(handler FacebookService) *FacebookServiceProcessor {

	self35 := &FacebookServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self35.processorMap["getName"] = &facebookServiceProcessorGetName{handler: handler}
	self35.processorMap["getVersion"] = &facebookServiceProcessorGetVersion{handler: handler}
	self35.processorMap["getStatus"] = &facebookServiceProcessorGetStatus{handler: handler}
	self35.processorMap["getStatusDetails"] = &facebookServiceProcessorGetStatusDetails{handler: handler}
	self35.processorMap["getCounters"] = &facebookServiceProcessorGetCounters{handler: handler}
	self35.processorMap["getCounter"] = &facebookServiceProcessorGetCounter{handler: handler}
	self35.processorMap["setOption"] = &facebookServiceProcessorSetOption{handler: handler}
	self35.processorMap["getOption"] = &facebookServiceProcessorGetOption{handler: handler}
	self35.processorMap["getOptions"] = &facebookServiceProcessorGetOptions{handler: handler}
	self35.processorMap["getCpuProfile"] = &facebookServiceProcessorGetCpuProfile{handler: handler}
	self35.processorMap["aliveSince"] = &facebookServiceProcessorAliveSince{handler: handler}
	self35.processorMap["reinitialize"] = &facebookServiceProcessorReinitialize{handler: handler}
	self35.processorMap["shutdown"] = &facebookServiceProcessorShutdown{handler: handler}
	return self35
}

func (p *FacebookServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
	if err2 != nil {
		return false, thrift.WrapTException(err2)
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(ctx, thrift.STRUCT)
	iprot.ReadMessageEnd(ctx)
	x36 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
	x36.Write(ctx, oprot)
	oprot.WriteMessageEnd(ctx)
	oprot.Flush(ctx)
	return false, x36

}

type facebookServiceProcessorGetName struct {
	handler FacebookService
}

func (p *facebookServiceProcessorGetName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err37 error
	args := FacebookServiceGetNameArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getName", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := FacebookServiceGetNameResult{}
	if retval, err2 := p.handler.GetName(ctx); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		_exc38 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getName: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "getName", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err37 = thrift.WrapTException(err2)
		}
		if err2 := _exc38.Write(ctx, oprot); _write_err37 == nil && err2 != nil {
			_write_err37 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err37 == nil && err2 != nil {
			_write_err37 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err37 == nil && err2 != nil {
			_write_err37 = thrift.WrapTException(err2)
		}
		if _write_err37 != nil {
			return false, thrift.WrapTException(_write_err37)
		}
		return true, err
	} else {
		result.Success = &retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getName", thrift.REPLY, seqId); err2 != nil {
		_write_err37 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err37 == nil && err2 != nil {
		_write_err37 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err37 == nil && err2 != nil {
		_write_err37 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err37 == nil && err2 != nil {
		_write_err37 = thrift.WrapTException(err2)
	}
	if _write_err37 != nil {
		return false, thrift.WrapTException(_write_err37)
	}
	return true, err
}

type facebookServiceProcessorGetVersion struct {
	handler FacebookService
}

func (p *facebookServiceProcessorGetVersion) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err39 error
	args := FacebookServiceGetVersionArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getVersion", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := FacebookServiceGetVersionResult{}
	if retval, err2 := p.handler.GetVersion(ctx); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		_exc40 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getVersion: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "getVersion", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err39 = thrift.WrapTException(err2)
		}
		if err2 := _exc40.Write(ctx, oprot); _write_err39 == nil && err2 != nil {
			_write_err39 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err39 == nil && err2 != nil {
			_write_err39 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err39 == nil && err2 != nil {
			_write_err39 = thrift.WrapTException(err2)
		}
		if _write_err39 != nil {
			return false, thrift.WrapTException(_write_err39)
		}
		return true, err
	} else {
		result.Success = &retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getVersion", thrift.REPLY, seqId); err2 != nil {
		_write_err39 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err39 == nil && err2 != nil {
		_write_err39 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err39 == nil && err2 != nil {
		_write_err39 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err39 == nil && err2 != nil {
		_write_err39 = thrift.WrapTException(err2)
	}
	if _write_err39 != nil {
		return false, thrift.WrapTException(_write_err39)
	}
	return true, err
}

type facebookServiceProcessorGetStatus struct {
	handler FacebookService
}

func (p *facebookServiceProcessorGetStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err41 error
	args := FacebookServiceGetStatusArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getStatus", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := FacebookServiceGetStatusResult{}
	if retval, err2 := p.handler.GetStatus(ctx); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		_exc42 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getStatus: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "getStatus", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err41 = thrift.WrapTException(err2)
		}
		if err2 := _exc42.Write(ctx, oprot); _write_err41 == nil && err2 != nil {
			_write_err41 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err41 == nil && err2 != nil {
			_write_err41 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err41 == nil && err2 != nil {
			_write_err41 = thrift.WrapTException(err2)
		}
		if _write_err41 != nil {
			return false, thrift.WrapTException(_write_err41)
		}
		return true, err
	} else {
		result.Success = &retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getStatus", thrift.REPLY, seqId); err2 != nil {
		_write_err41 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err41 == nil && err2 != nil {
		_write_err41 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err41 == nil && err2 != nil {
		_write_err41 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err41 == nil && err2 != nil {
		_write_err41 = thrift.WrapTException(err2)
	}
	if _write_err41 != nil {
		return false, thrift.WrapTException(_write_err41)
	}
	return true, err
}

type facebookServiceProcessorGetStatusDetails struct {
	handler FacebookService
}

func (p *facebookServiceProcessorGetStatusDetails) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err43 error
	args := FacebookServiceGetStatusDetailsArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getStatusDetails", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := FacebookServiceGetStatusDetailsResult{}
	if retval, err2 := p.handler.GetStatusDetails(ctx); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		_exc44 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getStatusDetails: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "getStatusDetails", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err43 = thrift.WrapTException(err2)
		}
		if err2 := _exc44.Write(ctx, oprot); _write_err43 == nil && err2 != nil {
			_write_err43 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err43 == nil && err2 != nil {
			_write_err43 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err43 == nil && err2 != nil {
			_write_err43 = thrift.WrapTException(err2)
		}
		if _write_err43 != nil {
			return false, thrift.WrapTException(_write_err43)
		}
		return true, err
	} else {
		result.Success = &retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getStatusDetails", thrift.REPLY, seqId); err2 != nil {
		_write_err43 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err43 == nil && err2 != nil {
		_write_err43 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err43 == nil && err2 != nil {
		_write_err43 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err43 == nil && err2 != nil {
		_write_err43 = thrift.WrapTException(err2)
	}
	if _write_err43 != nil {
		return false, thrift.WrapTException(_write_err43)
	}
	return true, err
}

type facebookServiceProcessorGetCounters struct {
	handler FacebookService
}

func (p *facebookServiceProcessorGetCounters) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err45 error
	args := FacebookServiceGetCountersArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getCounters", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := FacebookServiceGetCountersResult{}
	if retval, err2 := p.handler.GetCounters(ctx); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		_exc46 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCounters: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "getCounters", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err45 = thrift.WrapTException(err2)
		}
		if err2 := _exc46.Write(ctx, oprot); _write_err45 == nil && err2 != nil {
			_write_err45 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err45 == nil && err2 != nil {
			_write_err45 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err45 == nil && err2 != nil {
			_write_err45 = thrift.WrapTException(err2)
		}
		if _write_err45 != nil {
			return false, thrift.WrapTException(_write_err45)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getCounters", thrift.REPLY, seqId); err2 != nil {
		_write_err45 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err45 == nil && err2 != nil {
		_write_err45 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err45 == nil && err2 != nil {
		_write_err45 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err45 == nil && err2 != nil {
		_write_err45 = thrift.WrapTException(err2)
	}
	if _write_err45 != nil {
		return false, thrift.WrapTException(_write_err45)
	}
	return true, err
}

type facebookServiceProcessorGetCounter struct {
	handler FacebookService
}

func (p *facebookServiceProcessorGetCounter) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err47 error
	args := FacebookServiceGetCounterArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getCounter", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := FacebookServiceGetCounterResult{}
	if retval, err2 := p.handler.GetCounter(ctx, args.Key); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		_exc48 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCounter: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "getCounter", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err47 = thrift.WrapTException(err2)
		}
		if err2 := _exc48.Write(ctx, oprot); _write_err47 == nil && err2 != nil {
			_write_err47 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err47 == nil && err2 != nil {
			_write_err47 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err47 == nil && err2 != nil {
			_write_err47 = thrift.WrapTException(err2)
		}
		if _write_err47 != nil {
			return false, thrift.WrapTException(_write_err47)
		}
		return true, err
	} else {
		result.Success = &retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getCounter", thrift.REPLY, seqId); err2 != nil {
		_write_err47 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err47 == nil && err2 != nil {
		_write_err47 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err47 == nil && err2 != nil {
		_write_err47 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err47 == nil && err2 != nil {
		_write_err47 = thrift.WrapTException(err2)
	}
	if _write_err47 != nil {
		return false, thrift.WrapTException(_write_err47)
	}
	return true, err
}

type facebookServiceProcessorSetOption struct {
	handler FacebookService
}

func (p *facebookServiceProcessorSetOption) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err49 error
	args := FacebookServiceSetOptionArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "setOption", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := FacebookServiceSetOptionResult{}
	if err2 := p.handler.SetOption(ctx, args.Key, args.Value); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		_exc50 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setOption: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "setOption", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err49 = thrift.WrapTException(err2)
		}
		if err2 := _exc50.Write(ctx, oprot); _write_err49 == nil && err2 != nil {
			_write_err49 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err49 == nil && err2 != nil {
			_write_err49 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err49 == nil && err2 != nil {
			_write_err49 = thrift.WrapTException(err2)
		}
		if _write_err49 != nil {
			return false, thrift.WrapTException(_write_err49)
		}
		return true, err
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "setOption", thrift.REPLY, seqId); err2 != nil {
		_write_err49 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err49 == nil && err2 != nil {
		_write_err49 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err49 == nil && err2 != nil {
		_write_err49 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err49 == nil && err2 != nil {
		_write_err49 = thrift.WrapTException(err2)
	}
	if _write_err49 != nil {
		return false, thrift.WrapTException(_write_err49)
	}
	return true, err
}

type facebookServiceProcessorGetOption struct {
	handler FacebookService
}

func (p *facebookServiceProcessorGetOption) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err51 error
	args := FacebookServiceGetOptionArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getOption", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := FacebookServiceGetOptionResult{}
	if retval, err2 := p.handler.GetOption(ctx, args.Key); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		_exc52 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getOption: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "getOption", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err51 = thrift.WrapTException(err2)
		}
		if err2 := _exc52.Write(ctx, oprot); _write_err51 == nil && err2 != nil {
			_write_err51 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err51 == nil && err2 != nil {
			_write_err51 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err51 == nil && err2 != nil {
			_write_err51 = thrift.WrapTException(err2)
		}
		if _write_err51 != nil {
			return false, thrift.WrapTException(_write_err51)
		}
		return true, err
	} else {
		result.Success = &retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getOption", thrift.REPLY, seqId); err2 != nil {
		_write_err51 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err51 == nil && err2 != nil {
		_write_err51 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err51 == nil && err2 != nil {
		_write_err51 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err51 == nil && err2 != nil {
		_write_err51 = thrift.WrapTException(err2)
	}
	if _write_err51 != nil {
		return false, thrift.WrapTException(_write_err51)
	}
	return true, err
}

type facebookServiceProcessorGetOptions struct {
	handler FacebookService
}

func (p *facebookServiceProcessorGetOptions) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err53 error
	args := FacebookServiceGetOptionsArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getOptions", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := FacebookServiceGetOptionsResult{}
	if retval, err2 := p.handler.GetOptions(ctx); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		_exc54 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getOptions: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "getOptions", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err53 = thrift.WrapTException(err2)
		}
		if err2 := _exc54.Write(ctx, oprot); _write_err53 == nil && err2 != nil {
			_write_err53 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err53 == nil && err2 != nil {
			_write_err53 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err53 == nil && err2 != nil {
			_write_err53 = thrift.WrapTException(err2)
		}
		if _write_err53 != nil {
			return false, thrift.WrapTException(_write_err53)
		}
		return true, err
	} else {
		result.Success = retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getOptions", thrift.REPLY, seqId); err2 != nil {
		_write_err53 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err53 == nil && err2 != nil {
		_write_err53 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err53 == nil && err2 != nil {
		_write_err53 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err53 == nil && err2 != nil {
		_write_err53 = thrift.WrapTException(err2)
	}
	if _write_err53 != nil {
		return false, thrift.WrapTException(_write_err53)
	}
	return true, err
}

type facebookServiceProcessorGetCpuProfile struct {
	handler FacebookService
}

func (p *facebookServiceProcessorGetCpuProfile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err55 error
	args := FacebookServiceGetCpuProfileArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "getCpuProfile", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := FacebookServiceGetCpuProfileResult{}
	if retval, err2 := p.handler.GetCpuProfile(ctx, args.ProfileDurationInSec); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		_exc56 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getCpuProfile: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "getCpuProfile", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err55 = thrift.WrapTException(err2)
		}
		if err2 := _exc56.Write(ctx, oprot); _write_err55 == nil && err2 != nil {
			_write_err55 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err55 == nil && err2 != nil {
			_write_err55 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err55 == nil && err2 != nil {
			_write_err55 = thrift.WrapTException(err2)
		}
		if _write_err55 != nil {
			return false, thrift.WrapTException(_write_err55)
		}
		return true, err
	} else {
		result.Success = &retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "getCpuProfile", thrift.REPLY, seqId); err2 != nil {
		_write_err55 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err55 == nil && err2 != nil {
		_write_err55 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err55 == nil && err2 != nil {
		_write_err55 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err55 == nil && err2 != nil {
		_write_err55 = thrift.WrapTException(err2)
	}
	if _write_err55 != nil {
		return false, thrift.WrapTException(_write_err55)
	}
	return true, err
}

type facebookServiceProcessorAliveSince struct {
	handler FacebookService
}

func (p *facebookServiceProcessorAliveSince) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	var _write_err57 error
	args := FacebookServiceAliveSinceArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
		oprot.WriteMessageBegin(ctx, "aliveSince", thrift.EXCEPTION, seqId)
		x.Write(ctx, oprot)
		oprot.WriteMessageEnd(ctx)
		oprot.Flush(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	// Start a goroutine to do server side connectivity check.
	if thrift.ServerConnectivityCheckInterval > 0 {
		var cancel context.CancelFunc
		ctx, cancel = context.WithCancel(ctx)
		defer cancel()
		var tickerCtx context.Context
		tickerCtx, tickerCancel = context.WithCancel(context.Background())
		defer tickerCancel()
		go func(ctx context.Context, cancel context.CancelFunc) {
			ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
			defer ticker.Stop()
			for {
				select {
				case <-ctx.Done():
					return
				case <-ticker.C:
					if !iprot.Transport().IsOpen() {
						cancel()
						return
					}
				}
			}
		}(tickerCtx, cancel)
	}

	result := FacebookServiceAliveSinceResult{}
	if retval, err2 := p.handler.AliveSince(ctx); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
		if errors.Is(err2, thrift.ErrAbandonRequest) {
			return false, thrift.WrapTException(err2)
		}
		_exc58 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing aliveSince: "+err2.Error())
		if err2 := oprot.WriteMessageBegin(ctx, "aliveSince", thrift.EXCEPTION, seqId); err2 != nil {
			_write_err57 = thrift.WrapTException(err2)
		}
		if err2 := _exc58.Write(ctx, oprot); _write_err57 == nil && err2 != nil {
			_write_err57 = thrift.WrapTException(err2)
		}
		if err2 := oprot.WriteMessageEnd(ctx); _write_err57 == nil && err2 != nil {
			_write_err57 = thrift.WrapTException(err2)
		}
		if err2 := oprot.Flush(ctx); _write_err57 == nil && err2 != nil {
			_write_err57 = thrift.WrapTException(err2)
		}
		if _write_err57 != nil {
			return false, thrift.WrapTException(_write_err57)
		}
		return true, err
	} else {
		result.Success = &retval
	}
	tickerCancel()
	if err2 := oprot.WriteMessageBegin(ctx, "aliveSince", thrift.REPLY, seqId); err2 != nil {
		_write_err57 = thrift.WrapTException(err2)
	}
	if err2 := result.Write(ctx, oprot); _write_err57 == nil && err2 != nil {
		_write_err57 = thrift.WrapTException(err2)
	}
	if err2 := oprot.WriteMessageEnd(ctx); _write_err57 == nil && err2 != nil {
		_write_err57 = thrift.WrapTException(err2)
	}
	if err2 := oprot.Flush(ctx); _write_err57 == nil && err2 != nil {
		_write_err57 = thrift.WrapTException(err2)
	}
	if _write_err57 != nil {
		return false, thrift.WrapTException(_write_err57)
	}
	return true, err
}

type facebookServiceProcessorReinitialize struct {
	handler FacebookService
}

func (p *facebookServiceProcessorReinitialize) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FacebookServiceReinitializeArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	_ = tickerCancel

	if err2 := p.handler.Reinitialize(ctx); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
	}
	tickerCancel()
	return true, err
}

type facebookServiceProcessorShutdown struct {
	handler FacebookService
}

func (p *facebookServiceProcessorShutdown) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := FacebookServiceShutdownArgs{}
	if err2 := args.Read(ctx, iprot); err2 != nil {
		iprot.ReadMessageEnd(ctx)
		return false, thrift.WrapTException(err2)
	}
	iprot.ReadMessageEnd(ctx)

	tickerCancel := func() {}
	_ = tickerCancel

	if err2 := p.handler.Shutdown(ctx); err2 != nil {
		tickerCancel()
		err = thrift.WrapTException(err2)
	}
	tickerCancel()
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type FacebookServiceGetNameArgs struct {
}

func NewFacebookServiceGetNameArgs() *FacebookServiceGetNameArgs {
	return &FacebookServiceGetNameArgs{}
}

func (p *FacebookServiceGetNameArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FacebookServiceGetNameArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getName_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FacebookServiceGetNameArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FacebookServiceGetNameArgs(%+v)", *p)
}

// Attributes:
//   - Success
type FacebookServiceGetNameResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFacebookServiceGetNameResult() *FacebookServiceGetNameResult {
	return &FacebookServiceGetNameResult{}
}

var FacebookServiceGetNameResult_Success_DEFAULT string

func (p *FacebookServiceGetNameResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return FacebookServiceGetNameResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FacebookServiceGetNameResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FacebookServiceGetNameResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FacebookServiceGetNameResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FacebookServiceGetNameResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getName_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FacebookServiceGetNameResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FacebookServiceGetNameResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FacebookServiceGetNameResult(%+v)", *p)
}

type FacebookServiceGetVersionArgs struct {
}

func NewFacebookServiceGetVersionArgs() *FacebookServiceGetVersionArgs {
	return &FacebookServiceGetVersionArgs{}
}

func (p *FacebookServiceGetVersionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FacebookServiceGetVersionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getVersion_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FacebookServiceGetVersionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FacebookServiceGetVersionArgs(%+v)", *p)
}

// Attributes:
//   - Success
type FacebookServiceGetVersionResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFacebookServiceGetVersionResult() *FacebookServiceGetVersionResult {
	return &FacebookServiceGetVersionResult{}
}

var FacebookServiceGetVersionResult_Success_DEFAULT string

func (p *FacebookServiceGetVersionResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return FacebookServiceGetVersionResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FacebookServiceGetVersionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FacebookServiceGetVersionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FacebookServiceGetVersionResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FacebookServiceGetVersionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getVersion_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FacebookServiceGetVersionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FacebookServiceGetVersionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FacebookServiceGetVersionResult(%+v)", *p)
}

type FacebookServiceGetStatusArgs struct {
}

func NewFacebookServiceGetStatusArgs() *FacebookServiceGetStatusArgs {
	return &FacebookServiceGetStatusArgs{}
}

func (p *FacebookServiceGetStatusArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FacebookServiceGetStatusArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getStatus_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FacebookServiceGetStatusArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FacebookServiceGetStatusArgs(%+v)", *p)
}

// Attributes:
//   - Success
type FacebookServiceGetStatusResult struct {
	Success *FbStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFacebookServiceGetStatusResult() *FacebookServiceGetStatusResult {
	return &FacebookServiceGetStatusResult{}
}

var FacebookServiceGetStatusResult_Success_DEFAULT FbStatus

func (p *FacebookServiceGetStatusResult) GetSuccess() FbStatus {
	if !p.IsSetSuccess() {
		return FacebookServiceGetStatusResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FacebookServiceGetStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FacebookServiceGetStatusResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FacebookServiceGetStatusResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := FbStatus(v)
		p.Success = &temp
	}
	return nil
}

func (p *FacebookServiceGetStatusResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getStatus_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FacebookServiceGetStatusResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(ctx, int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FacebookServiceGetStatusResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FacebookServiceGetStatusResult(%+v)", *p)
}

type FacebookServiceGetStatusDetailsArgs struct {
}

func NewFacebookServiceGetStatusDetailsArgs() *FacebookServiceGetStatusDetailsArgs {
	return &FacebookServiceGetStatusDetailsArgs{}
}

func (p *FacebookServiceGetStatusDetailsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FacebookServiceGetStatusDetailsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getStatusDetails_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FacebookServiceGetStatusDetailsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FacebookServiceGetStatusDetailsArgs(%+v)", *p)
}

// Attributes:
//   - Success
type FacebookServiceGetStatusDetailsResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFacebookServiceGetStatusDetailsResult() *FacebookServiceGetStatusDetailsResult {
	return &FacebookServiceGetStatusDetailsResult{}
}

var FacebookServiceGetStatusDetailsResult_Success_DEFAULT string

func (p *FacebookServiceGetStatusDetailsResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return FacebookServiceGetStatusDetailsResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FacebookServiceGetStatusDetailsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FacebookServiceGetStatusDetailsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FacebookServiceGetStatusDetailsResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FacebookServiceGetStatusDetailsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getStatusDetails_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FacebookServiceGetStatusDetailsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FacebookServiceGetStatusDetailsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FacebookServiceGetStatusDetailsResult(%+v)", *p)
}

type FacebookServiceGetCountersArgs struct {
}

func NewFacebookServiceGetCountersArgs() *FacebookServiceGetCountersArgs {
	return &FacebookServiceGetCountersArgs{}
}

func (p *FacebookServiceGetCountersArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FacebookServiceGetCountersArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getCounters_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FacebookServiceGetCountersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FacebookServiceGetCountersArgs(%+v)", *p)
}

// Attributes:
//   - Success
type FacebookServiceGetCountersResult struct {
	Success map[string]int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFacebookServiceGetCountersResult() *FacebookServiceGetCountersResult {
	return &FacebookServiceGetCountersResult{}
}

var FacebookServiceGetCountersResult_Success_DEFAULT map[string]int64

func (p *FacebookServiceGetCountersResult) GetSuccess() map[string]int64 {
	return p.Success
}
func (p *FacebookServiceGetCountersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FacebookServiceGetCountersResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FacebookServiceGetCountersResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]int64, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key59 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key59 = v
		}
		var _val60 int64
		if v, err := iprot.ReadI64(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val60 = v
		}
		p.Success[_key59] = _val60
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *FacebookServiceGetCountersResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getCounters_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FacebookServiceGetCountersResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.I64, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI64(ctx, int64(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FacebookServiceGetCountersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FacebookServiceGetCountersResult(%+v)", *p)
}

// Attributes:
//   - Key
type FacebookServiceGetCounterArgs struct {
	Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewFacebookServiceGetCounterArgs() *FacebookServiceGetCounterArgs {
	return &FacebookServiceGetCounterArgs{}
}

func (p *FacebookServiceGetCounterArgs) GetKey() string {
	return p.Key
}
func (p *FacebookServiceGetCounterArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FacebookServiceGetCounterArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *FacebookServiceGetCounterArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getCounter_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FacebookServiceGetCounterArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *FacebookServiceGetCounterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FacebookServiceGetCounterArgs(%+v)", *p)
}

// Attributes:
//   - Success
type FacebookServiceGetCounterResult struct {
	Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFacebookServiceGetCounterResult() *FacebookServiceGetCounterResult {
	return &FacebookServiceGetCounterResult{}
}

var FacebookServiceGetCounterResult_Success_DEFAULT int64

func (p *FacebookServiceGetCounterResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return FacebookServiceGetCounterResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FacebookServiceGetCounterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FacebookServiceGetCounterResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FacebookServiceGetCounterResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FacebookServiceGetCounterResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getCounter_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FacebookServiceGetCounterResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FacebookServiceGetCounterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FacebookServiceGetCounterResult(%+v)", *p)
}

// Attributes:
//   - Key
//   - Value
type FacebookServiceSetOptionArgs struct {
	Key   string `thrift:"key,1" db:"key" json:"key"`
	Value string `thrift:"value,2" db:"value" json:"value"`
}

func NewFacebookServiceSetOptionArgs() *FacebookServiceSetOptionArgs {
	return &FacebookServiceSetOptionArgs{}
}

func (p *FacebookServiceSetOptionArgs) GetKey() string {
	return p.Key
}

func (p *FacebookServiceSetOptionArgs) GetValue() string {
	return p.Value
}
func (p *FacebookServiceSetOptionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField2(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FacebookServiceSetOptionArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *FacebookServiceSetOptionArgs) ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *FacebookServiceSetOptionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "setOption_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
		if err := p.writeField2(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FacebookServiceSetOptionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *FacebookServiceSetOptionArgs) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
	}
	return err
}

func (p *FacebookServiceSetOptionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FacebookServiceSetOptionArgs(%+v)", *p)
}

type FacebookServiceSetOptionResult struct {
}

func NewFacebookServiceSetOptionResult() *FacebookServiceSetOptionResult {
	return &FacebookServiceSetOptionResult{}
}

func (p *FacebookServiceSetOptionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FacebookServiceSetOptionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "setOption_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FacebookServiceSetOptionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FacebookServiceSetOptionResult(%+v)", *p)
}

// Attributes:
//   - Key
type FacebookServiceGetOptionArgs struct {
	Key string `thrift:"key,1" db:"key" json:"key"`
}

func NewFacebookServiceGetOptionArgs() *FacebookServiceGetOptionArgs {
	return &FacebookServiceGetOptionArgs{}
}

func (p *FacebookServiceGetOptionArgs) GetKey() string {
	return p.Key
}
func (p *FacebookServiceGetOptionArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FacebookServiceGetOptionArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Key = v
	}
	return nil
}

func (p *FacebookServiceGetOptionArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getOption_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FacebookServiceGetOptionArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "key", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := oprot.WriteString(ctx, string(p.Key)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *FacebookServiceGetOptionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FacebookServiceGetOptionArgs(%+v)", *p)
}

// Attributes:
//   - Success
type FacebookServiceGetOptionResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFacebookServiceGetOptionResult() *FacebookServiceGetOptionResult {
	return &FacebookServiceGetOptionResult{}
}

var FacebookServiceGetOptionResult_Success_DEFAULT string

func (p *FacebookServiceGetOptionResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return FacebookServiceGetOptionResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FacebookServiceGetOptionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FacebookServiceGetOptionResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FacebookServiceGetOptionResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FacebookServiceGetOptionResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getOption_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FacebookServiceGetOptionResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FacebookServiceGetOptionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FacebookServiceGetOptionResult(%+v)", *p)
}

type FacebookServiceGetOptionsArgs struct {
}

func NewFacebookServiceGetOptionsArgs() *FacebookServiceGetOptionsArgs {
	return &FacebookServiceGetOptionsArgs{}
}

func (p *FacebookServiceGetOptionsArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FacebookServiceGetOptionsArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getOptions_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FacebookServiceGetOptionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FacebookServiceGetOptionsArgs(%+v)", *p)
}

// Attributes:
//   - Success
type FacebookServiceGetOptionsResult struct {
	Success map[string]string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFacebookServiceGetOptionsResult() *FacebookServiceGetOptionsResult {
	return &FacebookServiceGetOptionsResult{}
}

var FacebookServiceGetOptionsResult_Success_DEFAULT map[string]string

func (p *FacebookServiceGetOptionsResult) GetSuccess() map[string]string {
	return p.Success
}
func (p *FacebookServiceGetOptionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FacebookServiceGetOptionsResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.MAP {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FacebookServiceGetOptionsResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin(ctx)
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key61 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key61 = v
		}
		var _val62 string
		if v, err := iprot.ReadString(ctx); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val62 = v
		}
		p.Success[_key61] = _val62
	}
	if err := iprot.ReadMapEnd(ctx); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *FacebookServiceGetOptionsResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getOptions_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FacebookServiceGetOptionsResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(ctx, thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(ctx, string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(ctx, string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(ctx); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FacebookServiceGetOptionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FacebookServiceGetOptionsResult(%+v)", *p)
}

// Attributes:
//   - ProfileDurationInSec
type FacebookServiceGetCpuProfileArgs struct {
	ProfileDurationInSec int32 `thrift:"profileDurationInSec,1" db:"profileDurationInSec" json:"profileDurationInSec"`
}

func NewFacebookServiceGetCpuProfileArgs() *FacebookServiceGetCpuProfileArgs {
	return &FacebookServiceGetCpuProfileArgs{}
}

func (p *FacebookServiceGetCpuProfileArgs) GetProfileDurationInSec() int32 {
	return p.ProfileDurationInSec
}
func (p *FacebookServiceGetCpuProfileArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I32 {
				if err := p.ReadField1(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FacebookServiceGetCpuProfileArgs) ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(ctx); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProfileDurationInSec = v
	}
	return nil
}

func (p *FacebookServiceGetCpuProfileArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getCpuProfile_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField1(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FacebookServiceGetCpuProfileArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin(ctx, "profileDurationInSec", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:profileDurationInSec: ", p), err)
	}
	if err := oprot.WriteI32(ctx, int32(p.ProfileDurationInSec)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.profileDurationInSec (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:profileDurationInSec: ", p), err)
	}
	return err
}

func (p *FacebookServiceGetCpuProfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FacebookServiceGetCpuProfileArgs(%+v)", *p)
}

// Attributes:
//   - Success
type FacebookServiceGetCpuProfileResult struct {
	Success *string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFacebookServiceGetCpuProfileResult() *FacebookServiceGetCpuProfileResult {
	return &FacebookServiceGetCpuProfileResult{}
}

var FacebookServiceGetCpuProfileResult_Success_DEFAULT string

func (p *FacebookServiceGetCpuProfileResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return FacebookServiceGetCpuProfileResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FacebookServiceGetCpuProfileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FacebookServiceGetCpuProfileResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRING {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FacebookServiceGetCpuProfileResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(ctx); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FacebookServiceGetCpuProfileResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "getCpuProfile_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FacebookServiceGetCpuProfileResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(ctx, string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FacebookServiceGetCpuProfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FacebookServiceGetCpuProfileResult(%+v)", *p)
}

type FacebookServiceAliveSinceArgs struct {
}

func NewFacebookServiceAliveSinceArgs() *FacebookServiceAliveSinceArgs {
	return &FacebookServiceAliveSinceArgs{}
}

func (p *FacebookServiceAliveSinceArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FacebookServiceAliveSinceArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "aliveSince_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FacebookServiceAliveSinceArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FacebookServiceAliveSinceArgs(%+v)", *p)
}

// Attributes:
//   - Success
type FacebookServiceAliveSinceResult struct {
	Success *int64 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewFacebookServiceAliveSinceResult() *FacebookServiceAliveSinceResult {
	return &FacebookServiceAliveSinceResult{}
}

var FacebookServiceAliveSinceResult_Success_DEFAULT int64

func (p *FacebookServiceAliveSinceResult) GetSuccess() int64 {
	if !p.IsSetSuccess() {
		return FacebookServiceAliveSinceResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *FacebookServiceAliveSinceResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *FacebookServiceAliveSinceResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if fieldTypeId == thrift.I64 {
				if err := p.ReadField0(ctx, iprot); err != nil {
					return err
				}
			} else {
				if err := iprot.Skip(ctx, fieldTypeId); err != nil {
					return err
				}
			}
		default:
			if err := iprot.Skip(ctx, fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FacebookServiceAliveSinceResult) ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(ctx); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *FacebookServiceAliveSinceResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "aliveSince_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
		if err := p.writeField0(ctx, oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FacebookServiceAliveSinceResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin(ctx, "success", thrift.I64, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI64(ctx, int64(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(ctx); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *FacebookServiceAliveSinceResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FacebookServiceAliveSinceResult(%+v)", *p)
}

type FacebookServiceReinitializeArgs struct {
}

func NewFacebookServiceReinitializeArgs() *FacebookServiceReinitializeArgs {
	return &FacebookServiceReinitializeArgs{}
}

func (p *FacebookServiceReinitializeArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FacebookServiceReinitializeArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "reinitialize_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FacebookServiceReinitializeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FacebookServiceReinitializeArgs(%+v)", *p)
}

type FacebookServiceShutdownArgs struct {
}

func NewFacebookServiceShutdownArgs() *FacebookServiceShutdownArgs {
	return &FacebookServiceShutdownArgs{}
}

func (p *FacebookServiceShutdownArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(ctx, fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(ctx); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(ctx); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *FacebookServiceShutdownArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin(ctx, "shutdown_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if p != nil {
	}
	if err := oprot.WriteFieldStop(ctx); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(ctx); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *FacebookServiceShutdownArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("FacebookServiceShutdownArgs(%+v)", *p)
}
